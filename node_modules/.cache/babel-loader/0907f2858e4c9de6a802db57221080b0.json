{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\babel-loader\\lib\\index.js!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue","mtime":1609323794000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BsTreegrid.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div\r\n    :class=\"_classNames\"\r\n    :style=\"_gridStyles\"\r\n    class=\"md-treegrid\">\r\n    <slot name=\"toolbar\"></slot>\r\n    <div class=\"md-grid-header\">\r\n      <div ref=\"theader\" class=\"md-grid-header-wrap\">\r\n        <table role=\"grid\" :style=\"_tableStyles\">\r\n          <colgroup>\r\n            <col\r\n              v-for=\"(column, idx) in columnIterator\"\r\n              :key=\"'col-' + _uuid() + idx\"\r\n              :style=\"_colHeaderStyles(column)\" />\r\n          </colgroup>\r\n          <thead role=\"rowgroup\">\r\n            <slot v-bind=\"{ items: dataItems }\" name=\"columnheader\"></slot>\r\n            <tr v-if=\"!$scopedSlots['columnheader']\" role=\"row\">\r\n              <slot></slot>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <bs-progress v-if=\"isLoading && loading.type === 'bar'\" v-bind=\"_progressLoadingAttrs\" />\r\n    <div\r\n      ref=\"tcontent\"\r\n      class=\"md-grid-content\"\r\n      @scroll=\"_handleScroll\">\r\n      <table role=\"treegrid\" :style=\"_tableStyles\">\r\n        <colgroup>\r\n          <col\r\n            v-for=\"(column, idx) in columnIterator\"\r\n            :key=\"'col-' + _uuid() + idx\"\r\n            :style=\"_colDataStyles(column)\" />\r\n        </colgroup>\r\n        <bs-treegrid-items\r\n          ref=\"treeitems\"\r\n          v-slot=\"{ index, item, level, node }\"\r\n          :columns=\"columnIterator\"\r\n          :items=\"dataItems\">\r\n          <slot\r\n            v-bind=\"{ columns: columnIterator, index: index, item: item, level: level, node: node }\"\r\n            name=\"datarow\"></slot>\r\n        </bs-treegrid-items>\r\n      </table>\r\n      <transition v-if=\"_showEmptyMessage\" name=\"fade\">\r\n        <div class=\"md-grid-alert my-3 mx-3 mx-md-auto\">\r\n          <bs-alert color=\"warning\" icon=\"exclamation-triangle\">\r\n            <slot name=\"emptyMessage\">\r\n              Sorry! No data to display here.\r\n            </slot>\r\n          </bs-alert>\r\n        </div>\r\n      </transition>\r\n    </div>\r\n    <div v-if=\"isLoading && loading.type === 'spinner'\" class=\"md-grid-progress-spinner\">\r\n      <bs-progress v-bind=\"_progressLoadingAttrs\" class=\"align-self-center\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsAlert from \"../BsBasic/BsAlert\";\r\nimport BsProgress from \"../BsAnimation/BsProgress\";\r\nimport BsTreegridItems from \"./BsTreegridItems\";\r\nimport BsTreeStore from \"../../model/BsTreeStore\";\r\nimport BsArrayStore from \"../../model/BsArrayStore\";\r\nimport Helper from \"../../utils/Helper\";\r\nimport Common from \"../../mixins/Common\";\r\nimport Grid from \"./mixins/Grid\";\r\nimport sum from 'lodash/sum';\r\nimport { addResizeListener, removeResizeListener } from \"../../utils/ResizeListener\";\r\n\r\nexport default {\r\n    name: \"BsTreegrid\",\r\n    components: {BsTreegridItems, BsProgress, BsAlert},\r\n    mixins: [Common, Grid],\r\n    props: {\r\n        childrenFieldmap: {\r\n            type: String,\r\n            default: 'children'\r\n        },\r\n        /**\r\n         * @type {BsTreeStore|BsArrayStore|*}\r\n         */\r\n        dataSource: {\r\n            type: [BsTreeStore, BsArrayStore],\r\n            default: undefined\r\n        },\r\n        expandDepth: {\r\n            type: [Number, String],\r\n            default: 0,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n        expanded: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    data: (vm) => ({\r\n        columnsWidth: [],\r\n        dataFetched: false,\r\n        isFetching: false,\r\n        table: {\r\n            columns: [],\r\n            childrenFieldmap: vm.childrenFieldmap,\r\n            /**\r\n             * @type {BsTreeStore|BsArrayStore}\r\n             */\r\n            dataSource: vm.dataSource,\r\n            expandDepth: vm.expandDepth,\r\n            expanded: vm.expanded,\r\n            tableWidth: undefined,\r\n            // methods\r\n            /**\r\n             * Filter the data based on the given filters and fire event <tt>'filter'</tt> after data has been filtered.\r\n             *\r\n             * @param {IFilter[]} filters - Collection of filters to be used\r\n             * @param {string} logic      - The filter logic to be used (optional)\r\n             */\r\n            fireEvent: vm.fireEvent\r\n        }\r\n    }),\r\n    provide() {\r\n        const _grid = this.table;\r\n\r\n        return {\r\n            TreeGrid: _grid\r\n        }\r\n    },\r\n    created() {\r\n        this._fetchData();\r\n    },\r\n    mounted() {\r\n        addResizeListener(this.$el, this._updateTableWidth);\r\n        this._updateBodyHeight();\r\n    },\r\n    beforeDestroy() {\r\n        removeResizeListener(this.$el, this._updateTableWidth);\r\n        this.columnsWidth = null;\r\n        this.table.columns = null;\r\n        this.table = null;\r\n    },\r\n    methods: {\r\n        /**\r\n         * Fetch data from array data source or remote server.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _fetchData() {\r\n            this.isFetching = true;\r\n\r\n            if (!Helper.isEmpty(this.dataSource)) {\r\n                if (this.$refs.treeitems) {\r\n                    this.$refs.treeitems.treeNodes = [];\r\n                }\r\n                this.dataSource\r\n                    .load()\r\n                    .then(() => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('data-bind', this.dataSource.dataItems);\r\n                        if (this.$refs.treeitems) {\r\n                            this.$refs.treeitems.populateNodes(0, this.dataSource.dataItems);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('error', error);\r\n                    });\r\n            } else {\r\n                this.dataFetched = false;\r\n                this.isFetching = false;\r\n            }\r\n        },\r\n        /**\r\n         * Event handler when table body is scrolling.\r\n         *\r\n         * @param {Event} e The received event\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _handleScroll(e) {\r\n            const scrollLeft = e.target.scrollLeft;\r\n            const theader = this.$refs.theader;\r\n            const tfooter = this.$refs.tfooter;\r\n\r\n            if (theader) {\r\n                theader.scrollLeft = scrollLeft;\r\n            }\r\n            if (tfooter) {\r\n                tfooter.scrollLeft = scrollLeft;\r\n            }\r\n        },\r\n        /**\r\n         * Update TreeGrid body height.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateBodyHeight() {\r\n            if (this.isFixedHeight && (!this.isSmallScreen || !this.flipOnSmallScreen)) {\r\n                const gridHeight = this.$el.offsetHeight;\r\n                const theaderHeight = this.$refs.theader ? this.$refs.theader.offsetHeight : 0;\r\n                const tfooterHeight = this.$refs.tfooter ? this.$refs.tfooter.offsetHeight : 0;\r\n                const footerHeight = this.$refs.footer ? this.$refs.footer.offsetHeight : 0;\r\n\r\n                this.$refs.tcontent.style.height = (gridHeight - (theaderHeight + tfooterHeight + footerHeight)) + 'px';\r\n            }\r\n        },\r\n        /**\r\n         * Detect screen size and recalculate TreeGrid width.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateTableWidth() {\r\n            if (this.$el && this.columnIterator.length > 0) {\r\n                if (this.columnsWidth.length === 0) {\r\n                    this.columnsWidth = this.columnIterator.map(col => col.width ? Number(col.width) : 0);\r\n                }\r\n                const numCols = this.columnIterator.length;\r\n                const elWidth = this.isFixedHeight\r\n                    ? (this.$el.getBoundingClientRect().width - 18)\r\n                    : this.$el.getBoundingClientRect().width;\r\n\r\n                let avgColWidth = 0;\r\n                let tmpCols = this.columnsWidth.map(col => col);\r\n                let decWidth = true;\r\n                let totWidth = sum(tmpCols);\r\n                const colsNoWidth = tmpCols.filter(c => c === 0);\r\n\r\n                if (elWidth > totWidth && colsNoWidth.length > 0) {\r\n                    avgColWidth = Math.floor((elWidth - totWidth) / colsNoWidth.length);\r\n                }\r\n\r\n                this.table.columns = this.columnIterator.map((col, idx) => {\r\n                    if (tmpCols[idx] === 0) {\r\n                        const minWidth = parseInt(col.minWidth, 10);\r\n\r\n                        if (avgColWidth < minWidth) {\r\n                            col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                        } else if (elWidth < (totWidth + avgColWidth)) {\r\n                            if (idx === numCols - 1) {\r\n                                col.width = Math.max((elWidth - totWidth), minWidth) - (decWidth ? 1 : 0);\r\n                            } else {\r\n                                col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                            }\r\n                        } else {\r\n                            col.width = decWidth ? (avgColWidth - 1) : avgColWidth;\r\n                        }\r\n                        totWidth += col.width;\r\n                        decWidth = false;\r\n                    }\r\n\r\n                    return col;\r\n                });\r\n\r\n                this.table.tableWidth = totWidth <= elWidth ? elWidth : totWidth;\r\n            } else {\r\n                this.table.tableWidth = null;\r\n            }\r\n        },\r\n        /**\r\n         * Reload data from the remote server.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        reload() {\r\n            this._fetchData();\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-treegrid {\r\n    .#{$prefix}-grid-content {\r\n        tr {\r\n            @include transition($transition-basic);\r\n\r\n            > .#{$prefix}-treegrid-cell {\r\n                &:first-child {\r\n                    padding-left: $table-cell-padding;\r\n                }\r\n\r\n                .#{$prefix}-grid-cell-inner {\r\n                    padding-left: .2rem;\r\n                }\r\n\r\n                .icon-chevron-right {\r\n                    @include transition($transition-basic);\r\n\r\n                    &.expanded {\r\n                        @include transform(rotateZ(90deg));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsGrid"}]}