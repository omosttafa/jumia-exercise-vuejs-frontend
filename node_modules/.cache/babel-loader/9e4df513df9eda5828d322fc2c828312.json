{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\babel-loader\\lib\\index.js!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsBasic\\BsChipGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsBasic\\BsChipGroup.vue","mtime":1617864092000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BsChipGroup.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :class=\"{'md-chip-group--column': column}\" class=\"md-chip-group\">\r\n    <div\r\n      v-if=\"_showSliderArrows\" \r\n      class=\"md-chip-slide-prev\">\r\n      <transition name=\"fade\">\r\n        <bs-button\r\n          :color=\"arrowsColor\"\r\n          :disabled=\"!_hasPrev\"\r\n          mode=\"icon\"\r\n          flat\r\n          @click=\"_scrollTo('prev')\">\r\n          <bs-icon \r\n            icon=\"chevron-left\"\r\n            size=\"24\" />\r\n        </bs-button>\r\n      </transition>\r\n    </div>\r\n    <div ref=\"wrapper\" class=\"md-chip-group-slider\">\r\n      <div ref=\"content\" class=\"md-chip-group-content\">\r\n        <template v-for=\"item in items\">\r\n          <bs-chip\r\n            :key=\"item.text\"\r\n            v-bind=\"_chipAttrs(item)\"\r\n            @click=\"_chipClick(item)\"\r\n            @close=\"$emit('item-close', item)\">\r\n            {{ item.text }}\r\n          </bs-chip>\r\n        </template>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"_showSliderArrows\" \r\n      class=\"md-chip-slide-next\">\r\n      <transition name=\"fade\">\r\n        <bs-button\r\n          :color=\"arrowsColor\"\r\n          :disabled=\"!_hasNext\"\r\n          mode=\"icon\"\r\n          flat\r\n          @click=\"_scrollTo('next')\">\r\n          <bs-icon \r\n            icon=\"chevron-right\"\r\n            size=\"24\" />\r\n        </bs-button>\r\n      </transition>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsChip from \"./BsChip\";\r\nimport BsButton from \"../BsButton/BsButton\";\r\n\r\nexport default {\r\n    name: \"BsChipGroup\",\r\n    components: {BsChip, BsButton},\r\n    model: {\r\n        prop: 'value',\r\n        event: 'change'\r\n    },\r\n    props: {\r\n        /**\r\n         * Css class to apply when the chip is in active state.\r\n         * @type {string|*}\r\n         */\r\n        activeClass: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Predefine color when Chip is in active state.\r\n         * @type {string|*}\r\n         */\r\n        activeColor: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * The default Chips color to apply.\r\n         * @type {string|*}\r\n         */\r\n        color: {\r\n            type: String,\r\n            default: 'light-grey'\r\n        },\r\n        /**\r\n         * Show checked icon when the Chip is selected.\r\n         * @type {boolean|*}\r\n         */\r\n        checkedIcon: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Enable multi rows if total width of items beyond the container width.\r\n         * @type {boolean|*}\r\n         */\r\n        column: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create Chip's avatar with circle shape.\r\n         * @type {boolean|*}\r\n         */\r\n        imgCircle: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Adjust Chip's avatar size to match the Chip height by eliminating the margin around the avatar.\r\n         * @type {boolean|*}\r\n         */\r\n        imgPadding: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Remove Chip's circle edges.\r\n         * @type {boolean|*}\r\n         */\r\n        label: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Allow multiple selection or not.\r\n         * @type {boolean|*}\r\n         */\r\n        multiple: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Render Chips with outlined style or not.\r\n         * @type {boolean|*}\r\n         */\r\n        outlined: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create Chip with predefined size, valid values are: `sm` (small), `lg` (large).\r\n         * @type {string|*}\r\n         */\r\n        size: {\r\n            type: String,\r\n            default: undefined,\r\n            validator: (value) => ['sm', 'lg'].includes(value)\r\n        },\r\n        /**\r\n         * Slider button color appearance.\r\n         * @type {string|*}\r\n         */\r\n        arrowsColor: {\r\n            type: String,\r\n            default: 'secondary'\r\n        },\r\n        /**\r\n         * Show slider's button or not.\r\n         * @type {boolean|*}\r\n         */\r\n        sliderArrows: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * The collection of `<bs-chip>` property-value.\r\n         * @type {Array|*}\r\n         */\r\n        items: {\r\n            type: Array,\r\n            default: undefined,\r\n            required: true\r\n        },\r\n        /**\r\n         * The value monitored by `v-model` for the selected items.\r\n         * @type {boolean|*}\r\n         */\r\n        value: {\r\n            type: [Array, String, Number],\r\n            default: undefined\r\n        },\r\n    },\r\n    data: () => ({\r\n        scrollOffset: 0,\r\n        widths: {\r\n            content: 0,\r\n            wrapper: 0,\r\n        },\r\n    }),\r\n    computed: {\r\n        /**\r\n         * Get Slider arrows status.\r\n         *\r\n         * @returns {boolean} Show slider arrows or not\r\n         * @private\r\n         */\r\n        _showSliderArrows() {\r\n            return this.sliderArrows && !this.column;\r\n        },\r\n        /**\r\n         * Get Slider container status.\r\n         *\r\n         * @returns {boolean} Can slide for next item or not\r\n         * @private\r\n         */\r\n        _hasNext() {\r\n            const { content, wrapper } = this.widths;\r\n            // Check one scroll ahead to know the width of right-most item\r\n            return content > Math.abs(this.scrollOffset) + wrapper;\r\n        },\r\n        /**\r\n         * Get Slider container status.\r\n         *\r\n         * @returns {boolean} Can slide for previous item or not\r\n         * @private\r\n         */\r\n        _hasPrev() {\r\n            return this.scrollOffset !== 0;\r\n        },\r\n    },\r\n    watch: {\r\n        scrollOffset(val) {\r\n            this.$refs.content.style.transform = `translateX(${-val}px)`;\r\n        },\r\n    },\r\n    mounted() {\r\n        this._calculateWidths();\r\n    },\r\n    methods: {\r\n        /**\r\n         * Calculate slider container width and items content width.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _calculateWidths() {\r\n            const { content, wrapper } = this.$refs;\r\n\r\n            this.widths = {\r\n                content: content ? content.clientWidth : 0,\r\n                wrapper: wrapper ? wrapper.clientWidth : 0,\r\n            };\r\n        },\r\n        /**\r\n         * Calculate scroll offset.\r\n         *\r\n         * @param {string} direction            Sliding direction\r\n         * @param {Object} widths               Slider container width\r\n         * @param {number} currentScrollOffset  Current scroll offset\r\n         * @returns {number} Scroll offset\r\n         * @private\r\n         */\r\n        _calculateNewOffset(direction, widths, currentScrollOffset) {\r\n            const newAbsoluteOffset = currentScrollOffset + (direction === 'prev' ? -1 : 1) * widths.wrapper;\r\n\r\n            return Math.max(Math.min(newAbsoluteOffset, widths.content - widths.wrapper), 0);\r\n        },\r\n        /**\r\n         * Set chip attributes.\r\n         *\r\n         * @param {Object} item  Chip item\r\n         * @returns {Object} Chip attributes\r\n         * @private\r\n         */\r\n        _chipAttrs(item) {\r\n            const matched = this.value\r\n                ? (Array.isArray(this.value) ? this.value.includes(item.text) : this.value === item.text)\r\n                : false;\r\n\r\n            let attrs = {\r\n                color: this.color,\r\n                size: this.size,\r\n                label: this.label,\r\n                outlined: this.outlined,\r\n                activeClass: this.activeClass,\r\n                activeColor: this.activeColor,\r\n                imgCircle: this.imgCircle,\r\n                imgPadding: this.imgPadding,\r\n                active: matched,\r\n                ...item,\r\n            }\r\n            delete attrs['value'];\r\n            delete attrs['text'];\r\n\r\n            if (this.checkedIcon && matched) {\r\n                attrs['icon'] = 'bs-checked';\r\n            }\r\n\r\n            return attrs;\r\n        },\r\n        /**\r\n         * Handle event when a chip is clicked.\r\n         *\r\n         * @param {Object} item  Chip item\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _chipClick(item) {\r\n            if (item.disabled) {\r\n                return;\r\n            }\r\n\r\n            if (this.multiple) {\r\n                let selected = this.value || [];\r\n\r\n                if (this.value && selected.includes(item.text)) {\r\n                    selected = this.value.filter(v => item.text !== v);\r\n                } else {\r\n                    selected.push(item.text);\r\n                }\r\n\r\n                this.$emit('change', selected);\r\n            } else {\r\n                this.$emit('change', (this.value !== item.text ? item.text : null));\r\n            }\r\n        },\r\n        /**\r\n         * Handle event when a slider arrow is clicked.\r\n         *\r\n         * @param {string} direction  Sliding direction\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _scrollTo(direction) {\r\n            this.scrollOffset = this._calculateNewOffset(direction, {\r\n                // Force reflow\r\n                content: this.$refs.content ? this.$refs.content.clientWidth : 0,\r\n                wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0,\r\n            }, this.scrollOffset);\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins/breakpoints\";\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-chip-group-slider {\r\n    @include flexbox((display: flex, flex: 1 1 auto));\r\n    contain: content;\r\n    overflow: auto hidden;\r\n\r\n    > .#{$prefix}-chip-group-content {\r\n        @include flexbox((display: flex, flex: 1 0 auto));\r\n        @include transition(.3s $md-transition-stand-timing);\r\n        padding: .25rem 0;   // 4px 0;\r\n        position: relative;\r\n        white-space: nowrap;\r\n\r\n        .#{$prefix}-chip {\r\n            margin: .25rem $padding-sm .25rem 0;\r\n        }\r\n    }\r\n}\r\n\r\n.#{$prefix}-chip-group {\r\n    @include flexbox((display: flex, flex: 0 1 auto));\r\n    @include transition(.3s $md-transition-stand-timing);\r\n    position: relative;\r\n    max-width: 100%;\r\n\r\n    > .#{$prefix}-chip-slide-prev,\r\n    > .#{$prefix}-chip-slide-next {\r\n        @include flexbox((display: flex, flex: 0 1 52px, align-items: center, justify-content: center));\r\n        min-width: 52px;\r\n    }\r\n\r\n    &.#{$prefix}-chip-group--column {\r\n        .#{$prefix}-chip-group-content {\r\n            @include flex-wrap(wrap);\r\n            max-width: 100%;\r\n            white-space: normal;\r\n        }\r\n    }\r\n\r\n    @include media-breakpoint-up(lg) {\r\n        > .#{$prefix}-chip-group-slider {\r\n            overflow: hidden;\r\n        }\r\n    }\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsBasic"}]}