{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue","mtime":1609323794000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIn5jb21wYXNzLXNhc3MtbWl4aW5zL2xpYi9jb21wYXNzL2NzczMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy9jb2xvcnMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy92YXJpYWJsZXMiOw0KDQouI3skcHJlZml4fS10cmVlZ3JpZCB7DQogICAgLiN7JHByZWZpeH0tZ3JpZC1jb250ZW50IHsNCiAgICAgICAgdHIgew0KICAgICAgICAgICAgQGluY2x1ZGUgdHJhbnNpdGlvbigkdHJhbnNpdGlvbi1iYXNpYyk7DQoNCiAgICAgICAgICAgID4gLiN7JHByZWZpeH0tdHJlZWdyaWQtY2VsbCB7DQogICAgICAgICAgICAgICAgJjpmaXJzdC1jaGlsZCB7DQogICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJHRhYmxlLWNlbGwtcGFkZGluZzsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAuI3skcHJlZml4fS1ncmlkLWNlbGwtaW5uZXIgew0KICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IC4ycmVtOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC5pY29uLWNoZXZyb24tcmlnaHQgew0KICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKCR0cmFuc2l0aW9uLWJhc2ljKTsNCg0KICAgICAgICAgICAgICAgICAgICAmLmV4cGFuZGVkIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zZm9ybShyb3RhdGVaKDkwZGVnKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="},{"version":3,"sources":["BsTreegrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuRA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BsTreegrid.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsGrid","sourcesContent":["<template>\r\n  <div\r\n    :class=\"_classNames\"\r\n    :style=\"_gridStyles\"\r\n    class=\"md-treegrid\">\r\n    <slot name=\"toolbar\"></slot>\r\n    <div class=\"md-grid-header\">\r\n      <div ref=\"theader\" class=\"md-grid-header-wrap\">\r\n        <table role=\"grid\" :style=\"_tableStyles\">\r\n          <colgroup>\r\n            <col\r\n              v-for=\"(column, idx) in columnIterator\"\r\n              :key=\"'col-' + _uuid() + idx\"\r\n              :style=\"_colHeaderStyles(column)\" />\r\n          </colgroup>\r\n          <thead role=\"rowgroup\">\r\n            <slot v-bind=\"{ items: dataItems }\" name=\"columnheader\"></slot>\r\n            <tr v-if=\"!$scopedSlots['columnheader']\" role=\"row\">\r\n              <slot></slot>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <bs-progress v-if=\"isLoading && loading.type === 'bar'\" v-bind=\"_progressLoadingAttrs\" />\r\n    <div\r\n      ref=\"tcontent\"\r\n      class=\"md-grid-content\"\r\n      @scroll=\"_handleScroll\">\r\n      <table role=\"treegrid\" :style=\"_tableStyles\">\r\n        <colgroup>\r\n          <col\r\n            v-for=\"(column, idx) in columnIterator\"\r\n            :key=\"'col-' + _uuid() + idx\"\r\n            :style=\"_colDataStyles(column)\" />\r\n        </colgroup>\r\n        <bs-treegrid-items\r\n          ref=\"treeitems\"\r\n          v-slot=\"{ index, item, level, node }\"\r\n          :columns=\"columnIterator\"\r\n          :items=\"dataItems\">\r\n          <slot\r\n            v-bind=\"{ columns: columnIterator, index: index, item: item, level: level, node: node }\"\r\n            name=\"datarow\"></slot>\r\n        </bs-treegrid-items>\r\n      </table>\r\n      <transition v-if=\"_showEmptyMessage\" name=\"fade\">\r\n        <div class=\"md-grid-alert my-3 mx-3 mx-md-auto\">\r\n          <bs-alert color=\"warning\" icon=\"exclamation-triangle\">\r\n            <slot name=\"emptyMessage\">\r\n              Sorry! No data to display here.\r\n            </slot>\r\n          </bs-alert>\r\n        </div>\r\n      </transition>\r\n    </div>\r\n    <div v-if=\"isLoading && loading.type === 'spinner'\" class=\"md-grid-progress-spinner\">\r\n      <bs-progress v-bind=\"_progressLoadingAttrs\" class=\"align-self-center\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsAlert from \"../BsBasic/BsAlert\";\r\nimport BsProgress from \"../BsAnimation/BsProgress\";\r\nimport BsTreegridItems from \"./BsTreegridItems\";\r\nimport BsTreeStore from \"../../model/BsTreeStore\";\r\nimport BsArrayStore from \"../../model/BsArrayStore\";\r\nimport Helper from \"../../utils/Helper\";\r\nimport Common from \"../../mixins/Common\";\r\nimport Grid from \"./mixins/Grid\";\r\nimport sum from 'lodash/sum';\r\nimport { addResizeListener, removeResizeListener } from \"../../utils/ResizeListener\";\r\n\r\nexport default {\r\n    name: \"BsTreegrid\",\r\n    components: {BsTreegridItems, BsProgress, BsAlert},\r\n    mixins: [Common, Grid],\r\n    props: {\r\n        childrenFieldmap: {\r\n            type: String,\r\n            default: 'children'\r\n        },\r\n        /**\r\n         * @type {BsTreeStore|BsArrayStore|*}\r\n         */\r\n        dataSource: {\r\n            type: [BsTreeStore, BsArrayStore],\r\n            default: undefined\r\n        },\r\n        expandDepth: {\r\n            type: [Number, String],\r\n            default: 0,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n        expanded: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    data: (vm) => ({\r\n        columnsWidth: [],\r\n        dataFetched: false,\r\n        isFetching: false,\r\n        table: {\r\n            columns: [],\r\n            childrenFieldmap: vm.childrenFieldmap,\r\n            /**\r\n             * @type {BsTreeStore|BsArrayStore}\r\n             */\r\n            dataSource: vm.dataSource,\r\n            expandDepth: vm.expandDepth,\r\n            expanded: vm.expanded,\r\n            tableWidth: undefined,\r\n            // methods\r\n            /**\r\n             * Filter the data based on the given filters and fire event <tt>'filter'</tt> after data has been filtered.\r\n             *\r\n             * @param {IFilter[]} filters - Collection of filters to be used\r\n             * @param {string} logic      - The filter logic to be used (optional)\r\n             */\r\n            fireEvent: vm.fireEvent\r\n        }\r\n    }),\r\n    provide() {\r\n        const _grid = this.table;\r\n\r\n        return {\r\n            TreeGrid: _grid\r\n        }\r\n    },\r\n    created() {\r\n        this._fetchData();\r\n    },\r\n    mounted() {\r\n        addResizeListener(this.$el, this._updateTableWidth);\r\n        this._updateBodyHeight();\r\n    },\r\n    beforeDestroy() {\r\n        removeResizeListener(this.$el, this._updateTableWidth);\r\n        this.columnsWidth = null;\r\n        this.table.columns = null;\r\n        this.table = null;\r\n    },\r\n    methods: {\r\n        /**\r\n         * Fetch data from array data source or remote server.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _fetchData() {\r\n            this.isFetching = true;\r\n\r\n            if (!Helper.isEmpty(this.dataSource)) {\r\n                if (this.$refs.treeitems) {\r\n                    this.$refs.treeitems.treeNodes = [];\r\n                }\r\n                this.dataSource\r\n                    .load()\r\n                    .then(() => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('data-bind', this.dataSource.dataItems);\r\n                        if (this.$refs.treeitems) {\r\n                            this.$refs.treeitems.populateNodes(0, this.dataSource.dataItems);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('error', error);\r\n                    });\r\n            } else {\r\n                this.dataFetched = false;\r\n                this.isFetching = false;\r\n            }\r\n        },\r\n        /**\r\n         * Event handler when table body is scrolling.\r\n         *\r\n         * @param {Event} e The received event\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _handleScroll(e) {\r\n            const scrollLeft = e.target.scrollLeft;\r\n            const theader = this.$refs.theader;\r\n            const tfooter = this.$refs.tfooter;\r\n\r\n            if (theader) {\r\n                theader.scrollLeft = scrollLeft;\r\n            }\r\n            if (tfooter) {\r\n                tfooter.scrollLeft = scrollLeft;\r\n            }\r\n        },\r\n        /**\r\n         * Update TreeGrid body height.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateBodyHeight() {\r\n            if (this.isFixedHeight && (!this.isSmallScreen || !this.flipOnSmallScreen)) {\r\n                const gridHeight = this.$el.offsetHeight;\r\n                const theaderHeight = this.$refs.theader ? this.$refs.theader.offsetHeight : 0;\r\n                const tfooterHeight = this.$refs.tfooter ? this.$refs.tfooter.offsetHeight : 0;\r\n                const footerHeight = this.$refs.footer ? this.$refs.footer.offsetHeight : 0;\r\n\r\n                this.$refs.tcontent.style.height = (gridHeight - (theaderHeight + tfooterHeight + footerHeight)) + 'px';\r\n            }\r\n        },\r\n        /**\r\n         * Detect screen size and recalculate TreeGrid width.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateTableWidth() {\r\n            if (this.$el && this.columnIterator.length > 0) {\r\n                if (this.columnsWidth.length === 0) {\r\n                    this.columnsWidth = this.columnIterator.map(col => col.width ? Number(col.width) : 0);\r\n                }\r\n                const numCols = this.columnIterator.length;\r\n                const elWidth = this.isFixedHeight\r\n                    ? (this.$el.getBoundingClientRect().width - 18)\r\n                    : this.$el.getBoundingClientRect().width;\r\n\r\n                let avgColWidth = 0;\r\n                let tmpCols = this.columnsWidth.map(col => col);\r\n                let decWidth = true;\r\n                let totWidth = sum(tmpCols);\r\n                const colsNoWidth = tmpCols.filter(c => c === 0);\r\n\r\n                if (elWidth > totWidth && colsNoWidth.length > 0) {\r\n                    avgColWidth = Math.floor((elWidth - totWidth) / colsNoWidth.length);\r\n                }\r\n\r\n                this.table.columns = this.columnIterator.map((col, idx) => {\r\n                    if (tmpCols[idx] === 0) {\r\n                        const minWidth = parseInt(col.minWidth, 10);\r\n\r\n                        if (avgColWidth < minWidth) {\r\n                            col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                        } else if (elWidth < (totWidth + avgColWidth)) {\r\n                            if (idx === numCols - 1) {\r\n                                col.width = Math.max((elWidth - totWidth), minWidth) - (decWidth ? 1 : 0);\r\n                            } else {\r\n                                col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                            }\r\n                        } else {\r\n                            col.width = decWidth ? (avgColWidth - 1) : avgColWidth;\r\n                        }\r\n                        totWidth += col.width;\r\n                        decWidth = false;\r\n                    }\r\n\r\n                    return col;\r\n                });\r\n\r\n                this.table.tableWidth = totWidth <= elWidth ? elWidth : totWidth;\r\n            } else {\r\n                this.table.tableWidth = null;\r\n            }\r\n        },\r\n        /**\r\n         * Reload data from the remote server.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        reload() {\r\n            this._fetchData();\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-treegrid {\r\n    .#{$prefix}-grid-content {\r\n        tr {\r\n            @include transition($transition-basic);\r\n\r\n            > .#{$prefix}-treegrid-cell {\r\n                &:first-child {\r\n                    padding-left: $table-cell-padding;\r\n                }\r\n\r\n                .#{$prefix}-grid-cell-inner {\r\n                    padding-left: .2rem;\r\n                }\r\n\r\n                .icon-chevron-right {\r\n                    @include transition($transition-basic);\r\n\r\n                    &.expanded {\r\n                        @include transform(rotateZ(90deg));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"]}]}