{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsBasic\\BsChipGroup.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsBasic\\BsChipGroup.vue","mtime":1617864092000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAifmJvb3RzdHJhcC9zY3NzL2Z1bmN0aW9ucyI7DQpAaW1wb3J0ICJ+Ym9vdHN0cmFwL3Njc3MvdmFyaWFibGVzIjsNCkBpbXBvcnQgIn5ib290c3RyYXAvc2Nzcy9taXhpbnMvYnJlYWtwb2ludHMiOw0KQGltcG9ydCAifmNvbXBhc3Mtc2Fzcy1taXhpbnMvbGliL2NvbXBhc3MvY3NzMyI7DQpAaW1wb3J0ICIuLi8uLi8uLi9zY3NzL2NvbG9ycyI7DQpAaW1wb3J0ICIuLi8uLi8uLi9zY3NzL3ZhcmlhYmxlcyI7DQoNCi4jeyRwcmVmaXh9LWNoaXAtZ3JvdXAtc2xpZGVyIHsNCiAgICBAaW5jbHVkZSBmbGV4Ym94KChkaXNwbGF5OiBmbGV4LCBmbGV4OiAxIDEgYXV0bykpOw0KICAgIGNvbnRhaW46IGNvbnRlbnQ7DQogICAgb3ZlcmZsb3c6IGF1dG8gaGlkZGVuOw0KDQogICAgPiAuI3skcHJlZml4fS1jaGlwLWdyb3VwLWNvbnRlbnQgew0KICAgICAgICBAaW5jbHVkZSBmbGV4Ym94KChkaXNwbGF5OiBmbGV4LCBmbGV4OiAxIDAgYXV0bykpOw0KICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKC4zcyAkbWQtdHJhbnNpdGlvbi1zdGFuZC10aW1pbmcpOw0KICAgICAgICBwYWRkaW5nOiAuMjVyZW0gMDsgICAvLyA0cHggMDsNCiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KDQogICAgICAgIC4jeyRwcmVmaXh9LWNoaXAgew0KICAgICAgICAgICAgbWFyZ2luOiAuMjVyZW0gJHBhZGRpbmctc20gLjI1cmVtIDA7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCi4jeyRwcmVmaXh9LWNoaXAtZ3JvdXAgew0KICAgIEBpbmNsdWRlIGZsZXhib3goKGRpc3BsYXk6IGZsZXgsIGZsZXg6IDAgMSBhdXRvKSk7DQogICAgQGluY2x1ZGUgdHJhbnNpdGlvbiguM3MgJG1kLXRyYW5zaXRpb24tc3RhbmQtdGltaW5nKTsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbWF4LXdpZHRoOiAxMDAlOw0KDQogICAgPiAuI3skcHJlZml4fS1jaGlwLXNsaWRlLXByZXYsDQogICAgPiAuI3skcHJlZml4fS1jaGlwLXNsaWRlLW5leHQgew0KICAgICAgICBAaW5jbHVkZSBmbGV4Ym94KChkaXNwbGF5OiBmbGV4LCBmbGV4OiAwIDEgNTJweCwgYWxpZ24taXRlbXM6IGNlbnRlciwganVzdGlmeS1jb250ZW50OiBjZW50ZXIpKTsNCiAgICAgICAgbWluLXdpZHRoOiA1MnB4Ow0KICAgIH0NCg0KICAgICYuI3skcHJlZml4fS1jaGlwLWdyb3VwLS1jb2x1bW4gew0KICAgICAgICAuI3skcHJlZml4fS1jaGlwLWdyb3VwLWNvbnRlbnQgew0KICAgICAgICAgICAgQGluY2x1ZGUgZmxleC13cmFwKHdyYXApOw0KICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vcm1hbDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAobGcpIHsNCiAgICAgICAgPiAuI3skcHJlZml4fS1jaGlwLWdyb3VwLXNsaWRlciB7DQogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"},{"version":3,"sources":["BsChipGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkVA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"BsChipGroup.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsBasic","sourcesContent":["<template>\r\n  <div :class=\"{'md-chip-group--column': column}\" class=\"md-chip-group\">\r\n    <div\r\n      v-if=\"_showSliderArrows\" \r\n      class=\"md-chip-slide-prev\">\r\n      <transition name=\"fade\">\r\n        <bs-button\r\n          :color=\"arrowsColor\"\r\n          :disabled=\"!_hasPrev\"\r\n          mode=\"icon\"\r\n          flat\r\n          @click=\"_scrollTo('prev')\">\r\n          <bs-icon \r\n            icon=\"chevron-left\"\r\n            size=\"24\" />\r\n        </bs-button>\r\n      </transition>\r\n    </div>\r\n    <div ref=\"wrapper\" class=\"md-chip-group-slider\">\r\n      <div ref=\"content\" class=\"md-chip-group-content\">\r\n        <template v-for=\"item in items\">\r\n          <bs-chip\r\n            :key=\"item.text\"\r\n            v-bind=\"_chipAttrs(item)\"\r\n            @click=\"_chipClick(item)\"\r\n            @close=\"$emit('item-close', item)\">\r\n            {{ item.text }}\r\n          </bs-chip>\r\n        </template>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"_showSliderArrows\" \r\n      class=\"md-chip-slide-next\">\r\n      <transition name=\"fade\">\r\n        <bs-button\r\n          :color=\"arrowsColor\"\r\n          :disabled=\"!_hasNext\"\r\n          mode=\"icon\"\r\n          flat\r\n          @click=\"_scrollTo('next')\">\r\n          <bs-icon \r\n            icon=\"chevron-right\"\r\n            size=\"24\" />\r\n        </bs-button>\r\n      </transition>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsChip from \"./BsChip\";\r\nimport BsButton from \"../BsButton/BsButton\";\r\n\r\nexport default {\r\n    name: \"BsChipGroup\",\r\n    components: {BsChip, BsButton},\r\n    model: {\r\n        prop: 'value',\r\n        event: 'change'\r\n    },\r\n    props: {\r\n        /**\r\n         * Css class to apply when the chip is in active state.\r\n         * @type {string|*}\r\n         */\r\n        activeClass: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Predefine color when Chip is in active state.\r\n         * @type {string|*}\r\n         */\r\n        activeColor: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * The default Chips color to apply.\r\n         * @type {string|*}\r\n         */\r\n        color: {\r\n            type: String,\r\n            default: 'light-grey'\r\n        },\r\n        /**\r\n         * Show checked icon when the Chip is selected.\r\n         * @type {boolean|*}\r\n         */\r\n        checkedIcon: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Enable multi rows if total width of items beyond the container width.\r\n         * @type {boolean|*}\r\n         */\r\n        column: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create Chip's avatar with circle shape.\r\n         * @type {boolean|*}\r\n         */\r\n        imgCircle: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Adjust Chip's avatar size to match the Chip height by eliminating the margin around the avatar.\r\n         * @type {boolean|*}\r\n         */\r\n        imgPadding: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Remove Chip's circle edges.\r\n         * @type {boolean|*}\r\n         */\r\n        label: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Allow multiple selection or not.\r\n         * @type {boolean|*}\r\n         */\r\n        multiple: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Render Chips with outlined style or not.\r\n         * @type {boolean|*}\r\n         */\r\n        outlined: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create Chip with predefined size, valid values are: `sm` (small), `lg` (large).\r\n         * @type {string|*}\r\n         */\r\n        size: {\r\n            type: String,\r\n            default: undefined,\r\n            validator: (value) => ['sm', 'lg'].includes(value)\r\n        },\r\n        /**\r\n         * Slider button color appearance.\r\n         * @type {string|*}\r\n         */\r\n        arrowsColor: {\r\n            type: String,\r\n            default: 'secondary'\r\n        },\r\n        /**\r\n         * Show slider's button or not.\r\n         * @type {boolean|*}\r\n         */\r\n        sliderArrows: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * The collection of `<bs-chip>` property-value.\r\n         * @type {Array|*}\r\n         */\r\n        items: {\r\n            type: Array,\r\n            default: undefined,\r\n            required: true\r\n        },\r\n        /**\r\n         * The value monitored by `v-model` for the selected items.\r\n         * @type {boolean|*}\r\n         */\r\n        value: {\r\n            type: [Array, String, Number],\r\n            default: undefined\r\n        },\r\n    },\r\n    data: () => ({\r\n        scrollOffset: 0,\r\n        widths: {\r\n            content: 0,\r\n            wrapper: 0,\r\n        },\r\n    }),\r\n    computed: {\r\n        /**\r\n         * Get Slider arrows status.\r\n         *\r\n         * @returns {boolean} Show slider arrows or not\r\n         * @private\r\n         */\r\n        _showSliderArrows() {\r\n            return this.sliderArrows && !this.column;\r\n        },\r\n        /**\r\n         * Get Slider container status.\r\n         *\r\n         * @returns {boolean} Can slide for next item or not\r\n         * @private\r\n         */\r\n        _hasNext() {\r\n            const { content, wrapper } = this.widths;\r\n            // Check one scroll ahead to know the width of right-most item\r\n            return content > Math.abs(this.scrollOffset) + wrapper;\r\n        },\r\n        /**\r\n         * Get Slider container status.\r\n         *\r\n         * @returns {boolean} Can slide for previous item or not\r\n         * @private\r\n         */\r\n        _hasPrev() {\r\n            return this.scrollOffset !== 0;\r\n        },\r\n    },\r\n    watch: {\r\n        scrollOffset(val) {\r\n            this.$refs.content.style.transform = `translateX(${-val}px)`;\r\n        },\r\n    },\r\n    mounted() {\r\n        this._calculateWidths();\r\n    },\r\n    methods: {\r\n        /**\r\n         * Calculate slider container width and items content width.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _calculateWidths() {\r\n            const { content, wrapper } = this.$refs;\r\n\r\n            this.widths = {\r\n                content: content ? content.clientWidth : 0,\r\n                wrapper: wrapper ? wrapper.clientWidth : 0,\r\n            };\r\n        },\r\n        /**\r\n         * Calculate scroll offset.\r\n         *\r\n         * @param {string} direction            Sliding direction\r\n         * @param {Object} widths               Slider container width\r\n         * @param {number} currentScrollOffset  Current scroll offset\r\n         * @returns {number} Scroll offset\r\n         * @private\r\n         */\r\n        _calculateNewOffset(direction, widths, currentScrollOffset) {\r\n            const newAbsoluteOffset = currentScrollOffset + (direction === 'prev' ? -1 : 1) * widths.wrapper;\r\n\r\n            return Math.max(Math.min(newAbsoluteOffset, widths.content - widths.wrapper), 0);\r\n        },\r\n        /**\r\n         * Set chip attributes.\r\n         *\r\n         * @param {Object} item  Chip item\r\n         * @returns {Object} Chip attributes\r\n         * @private\r\n         */\r\n        _chipAttrs(item) {\r\n            const matched = this.value\r\n                ? (Array.isArray(this.value) ? this.value.includes(item.text) : this.value === item.text)\r\n                : false;\r\n\r\n            let attrs = {\r\n                color: this.color,\r\n                size: this.size,\r\n                label: this.label,\r\n                outlined: this.outlined,\r\n                activeClass: this.activeClass,\r\n                activeColor: this.activeColor,\r\n                imgCircle: this.imgCircle,\r\n                imgPadding: this.imgPadding,\r\n                active: matched,\r\n                ...item,\r\n            }\r\n            delete attrs['value'];\r\n            delete attrs['text'];\r\n\r\n            if (this.checkedIcon && matched) {\r\n                attrs['icon'] = 'bs-checked';\r\n            }\r\n\r\n            return attrs;\r\n        },\r\n        /**\r\n         * Handle event when a chip is clicked.\r\n         *\r\n         * @param {Object} item  Chip item\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _chipClick(item) {\r\n            if (item.disabled) {\r\n                return;\r\n            }\r\n\r\n            if (this.multiple) {\r\n                let selected = this.value || [];\r\n\r\n                if (this.value && selected.includes(item.text)) {\r\n                    selected = this.value.filter(v => item.text !== v);\r\n                } else {\r\n                    selected.push(item.text);\r\n                }\r\n\r\n                this.$emit('change', selected);\r\n            } else {\r\n                this.$emit('change', (this.value !== item.text ? item.text : null));\r\n            }\r\n        },\r\n        /**\r\n         * Handle event when a slider arrow is clicked.\r\n         *\r\n         * @param {string} direction  Sliding direction\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _scrollTo(direction) {\r\n            this.scrollOffset = this._calculateNewOffset(direction, {\r\n                // Force reflow\r\n                content: this.$refs.content ? this.$refs.content.clientWidth : 0,\r\n                wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0,\r\n            }, this.scrollOffset);\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins/breakpoints\";\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-chip-group-slider {\r\n    @include flexbox((display: flex, flex: 1 1 auto));\r\n    contain: content;\r\n    overflow: auto hidden;\r\n\r\n    > .#{$prefix}-chip-group-content {\r\n        @include flexbox((display: flex, flex: 1 0 auto));\r\n        @include transition(.3s $md-transition-stand-timing);\r\n        padding: .25rem 0;   // 4px 0;\r\n        position: relative;\r\n        white-space: nowrap;\r\n\r\n        .#{$prefix}-chip {\r\n            margin: .25rem $padding-sm .25rem 0;\r\n        }\r\n    }\r\n}\r\n\r\n.#{$prefix}-chip-group {\r\n    @include flexbox((display: flex, flex: 0 1 auto));\r\n    @include transition(.3s $md-transition-stand-timing);\r\n    position: relative;\r\n    max-width: 100%;\r\n\r\n    > .#{$prefix}-chip-slide-prev,\r\n    > .#{$prefix}-chip-slide-next {\r\n        @include flexbox((display: flex, flex: 0 1 52px, align-items: center, justify-content: center));\r\n        min-width: 52px;\r\n    }\r\n\r\n    &.#{$prefix}-chip-group--column {\r\n        .#{$prefix}-chip-group-content {\r\n            @include flex-wrap(wrap);\r\n            max-width: 100%;\r\n            white-space: normal;\r\n        }\r\n    }\r\n\r\n    @include media-breakpoint-up(lg) {\r\n        > .#{$prefix}-chip-group-slider {\r\n            overflow: hidden;\r\n        }\r\n    }\r\n}\r\n</style>\r\n"]}]}