{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsField\\BsCheckboxGroup.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsField\\BsCheckboxGroup.vue","mtime":1617196593000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy9jb2xvcnMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy92YXJpYWJsZXMiOw0KDQouI3skcHJlZml4fS1jaGVja2JveC1ncm91cCB7DQogICAgLiN7JHByZWZpeH0tZmllbGQtaW5uZXIgew0KICAgICAgICBib3JkZXItYm90dG9tOiAwICFpbXBvcnRhbnQ7DQogICAgfQ0KfQ0K"},{"version":3,"sources":["BsCheckboxGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"BsCheckboxGroup.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsField","sourcesContent":["<template>\r\n  <div :class=\"_classNames\" class=\"md-field md-checkbox-group row\">\r\n    <slot></slot>\r\n    <div class=\"col-md\">\r\n      <div class=\"md-field-inner\">\r\n        <div class=\"form-row\">\r\n          <template v-if=\"columns\">\r\n            <div\r\n              v-for=\"(item, idx) in items\"\r\n              :key=\"'cbo-' + idx\"\r\n              :class=\"_itemClasses\">\r\n              <bs-checkbox\r\n                v-bind=\"_checkboxAttributes(item, idx)\"\r\n                @change=\"setValue\">\r\n                {{ item.label }}\r\n              </bs-checkbox>\r\n            </div>\r\n          </template>\r\n          <template v-else>\r\n            <div\r\n              v-for=\"(item, idx) in items\"\r\n              :key=\"'cbo-' + idx\"\r\n              :class=\"{'col-12 col-md': items.length > 3, 'px-1': items.length < 4}\">\r\n              <bs-checkbox\r\n                v-bind=\"_checkboxAttributes(item, idx)\"\r\n                @change=\"setValue\">\r\n                {{ item.label }}\r\n              </bs-checkbox>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"helpText || showErrorValidation\" class=\"md-help-text\">\r\n        <slot name=\"helpText\">\r\n          <small v-if=\"showHelpText\" class=\"text-muted d-block\">\r\n            {{ helpText }}\r\n          </small>\r\n        </slot>\r\n        <template v-if=\"hasValidationError\">\r\n          <small\r\n            v-for=\"(fld) in errorItems\"\r\n            :key=\"fld\"\r\n            class=\"text-danger d-block\">\r\n            {{ _validationMessage(fld) }}\r\n          </small>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsCheckbox from \"./BsCheckbox\";\r\nimport FieldValidation from \"./mixins/FieldValidation\";\r\n\r\nexport default {\r\n    name: \"BsCheckboxGroup\",\r\n    components: {BsCheckbox},\r\n    mixins: [FieldValidation],\r\n    model: {\r\n        prop: 'value',\r\n        event: 'change'\r\n    },\r\n    props: {\r\n        /**\r\n         * The component color appearance.\r\n         * @type {string|*}\r\n         */\r\n        color: {\r\n            type: String,\r\n            default: 'default'\r\n        },\r\n        /**\r\n         * Sets the maximum number of columns to display the checkbox. When the number of items\r\n         * exceed the number of columns, then the remaining items will be displayed on the\r\n         * next row.\r\n         * @type {number|*}\r\n         */\r\n        columns: {\r\n            type: Number,\r\n            default: undefined,\r\n            validator: v => v > 0 && v < 5\r\n        },\r\n        /**\r\n         * The value monitored by `v-model` to maintain checked state.\r\n         * @type {Array|*}\r\n         */\r\n        value: {\r\n            type: Array,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * The collection of `<bs-checkbox>` property-value.\r\n         * @type {Array|*}\r\n         */\r\n        items: {\r\n            type: Array,\r\n            default: undefined,\r\n            required: true\r\n        },\r\n        /**\r\n         * Sets the `<input>` element `name` attribute.\r\n         * @type {string|number|*}\r\n         */\r\n        name: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Show persistent help text or not.\r\n         * @type {boolean|*}\r\n         */\r\n        persistentHelpText: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * The checkbox-group `<input>` element `required` attribute.\r\n         * @type {boolean|*}\r\n         */\r\n        required: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Put the checkbox-group in readonly state and sets the each `<input>` element `readonly` attribute.\r\n         * @type {boolean|*}\r\n         */\r\n        readonly: Boolean,\r\n        /**\r\n         * Disable the checkbox-group and the `<input>` element.\r\n         * @type {boolean|*}\r\n         */\r\n        disabled: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets an indeterminate state for the checkbox-group.\r\n         * @type {boolean|*}\r\n         */\r\n        indeterminate: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    computed: {\r\n        /**\r\n         * Get computed component's class names.\r\n         *\r\n         * @returns {Object|*} The collection of css classes\r\n         */\r\n        _classNames() {\r\n            return {\r\n                'md-disabled': this.disabled,\r\n                'md-readonly': this.readonly,\r\n                'md-required': this.required,\r\n                'has-error': this.hasValidationError,\r\n                'has-success': this.hasValidated && !this.hasValidationError\r\n            }\r\n        },\r\n        _itemClasses() {\r\n            return {\r\n                'col-md-6': this.columns > 1,\r\n                'col-md-12': this.columns === 1,\r\n                ['col-lg-' + Math.ceil(12 / this.columns)]: true\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        /**\r\n         * Set attributes for each checkbox item.\r\n         *\r\n         * @param {Object} item  Global attribute\r\n         * @param {number} index Checkbox item index\r\n         * @returns {Object|*} The attributes to bind\r\n         * @private\r\n         */\r\n        _checkboxAttributes(item, index) {\r\n            return {\r\n                color: item.color || this.color,\r\n                disabled: item.disabled || this.disabled,\r\n                readonly: item.readonly || this.readonly,\r\n                value: item.value,\r\n                name: item.name ? item.name : (this.name ? (this.name + '[' + index + ']') : null),\r\n                indeterminate: item.indeterminate || this.indeterminate,\r\n                checked: this.value\r\n            }\r\n        },\r\n        /**\r\n         * Set CheckboxGroup value.\r\n         *\r\n         * @param {string|number|boolean|Array} value The value to set\r\n         * @returns {void}\r\n         */\r\n        setValue(value) {\r\n            this.$emit('change', value);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-checkbox-group {\r\n    .#{$prefix}-field-inner {\r\n        border-bottom: 0 !important;\r\n    }\r\n}\r\n</style>\r\n"]}]}