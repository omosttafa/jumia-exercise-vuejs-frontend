{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsAnimation\\BsMaskLoader.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsAnimation\\BsMaskLoader.vue","mtime":1611489717000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIn5jb21wYXNzLXNhc3MtbWl4aW5zL2xpYi9jb21wYXNzL2NzczMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy9jb2xvcnMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy92YXJpYWJsZXMiOw0KDQouI3skcHJlZml4fS1tYXNrLWxvYWRlciB7DQogICAgQGluY2x1ZGUgZmxleGJveCgoZGlzcGxheTogZmxleCwgYWxpZ24taXRlbXM6IGNlbnRlciwganVzdGlmeS1jb250ZW50OiBjZW50ZXIpKTsNCiAgICBsZWZ0OiAwOw0KICAgIHRvcDogMDsNCiAgICByaWdodDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgbWF4LWhlaWdodDogMTAwJTsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQoNCiAgICA+IC4jeyRwcmVmaXh9LXNwaW5uZXItcm90YXRlIHsNCiAgICAgICAgYW5pbWF0aW9uOiBtZC1wcm9ncmVzcy1zcGlubmVyLXJvdGF0ZSAxLjVzIGxpbmVhciBpbmZpbml0ZTsNCiAgICB9DQp9DQo="},{"version":3,"sources":["BsMaskLoader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BsMaskLoader.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsAnimation","sourcesContent":["<template>\r\n  <transition :name=\"transition\">\r\n    <div\r\n      v-if=\"show\"\r\n      :style=\"_wrapperStyles\"\r\n      class=\"md-mask-loader\">\r\n      <bs-progress\r\n        v-if=\"isProgress\"\r\n        :color=\"spinnerColor\"\r\n        :diameter=\"spinnerDiameter\"\r\n        :stroke=\"spinnerThickness\"\r\n        class=\"align-self-center\"\r\n        type=\"spinner\" />\r\n      <svg\r\n        v-else-if=\"isSpinner\"\r\n        :class=\"_spinnerClasses\"\r\n        :style=\"_spinnerStyles\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 512 512\"\r\n        role=\"img\"\r\n        class=\"md-spinner-rotate align-self-center\"\r\n        focusable=\"false\">\r\n        <path :d=\"svgPathData\" fill=\"currentColor\" />\r\n      </svg>\r\n      <div\r\n        v-else\r\n        :class=\"_bsSpinnerClasses\"\r\n        :style=\"_bsSpinnerStyles\">\r\n      </div>\r\n      <bs-overlay\r\n        :color=\"overlayColor\"\r\n        :opacity=\"overlayOpacity\"\r\n        :show=\"show\"\r\n        :z-index=\"zIndex - 1\" />\r\n    </div>\r\n  </transition>\r\n</template>\r\n\r\n<script>\r\nimport BsProgress from \"./BsProgress\";\r\nimport BsOverlay from \"./BsOverlay\";\r\nimport Helper from \"../../utils/Helper\";\r\n\r\nexport default {\r\n    name: \"BsMaskLoader\",\r\n    components: {BsProgress, BsOverlay},\r\n    props: {\r\n        /**\r\n         * Sets the css-style `position` value. If `true` then css-style `position` is set to `fixed`.\r\n         * @type {boolean|*}\r\n         */\r\n        fixedPosition: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Mask loader state, show or hide.\r\n         * @type {boolean|*}\r\n         */\r\n        show: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Backdrop overlay opacity value.\r\n         * @type {number|*}\r\n         */\r\n        overlayOpacity: {\r\n            type: Number,\r\n            default: 0.4\r\n        },\r\n        /**\r\n         * Backdrop overlay color.\r\n         * @type {string|*}\r\n         */\r\n        overlayColor: {\r\n            type: String,\r\n            default: '#000'\r\n        },\r\n        /**\r\n         * The animation transition to be used when displaying the mask loader.\r\n         * @type {string|*}\r\n         */\r\n        transition: {\r\n            type: String,\r\n            default: 'fade'\r\n        },\r\n        /**\r\n         * Mask loader spinner color.\r\n         * @type {string|*}\r\n         */\r\n        spinnerColor: {\r\n            type: String,\r\n            default: BsProgress.props.color.default\r\n        },\r\n        /**\r\n         * Mask loader spinner diameter.\r\n         * @type {number|*}\r\n         */\r\n        spinnerDiameter: {\r\n            type: [Number, String],\r\n            default: 35,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n        /**\r\n         * Mask loader spinner thickness.\r\n         * @type {number|*}\r\n         */\r\n        spinnerThickness: {\r\n            type: [Number, String],\r\n            default: 5,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n        /**\r\n         * Mask loader spinner type.\r\n         * @type {string|*}\r\n         */\r\n        spinnerType: {\r\n            type: String,\r\n            default: 'linear',\r\n            validator: v => ['linear', 'progress', 'spinner', 'grow'].includes(v)\r\n        },\r\n        /**\r\n         * Sets the css style `z-index` value.\r\n         * @type {number|*}\r\n         */\r\n        zIndex: {\r\n            type: [Number, String],\r\n            default: 100,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n    },\r\n    data: () => ({\r\n        svgPathData: 'M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z',\r\n    }),\r\n    computed: {\r\n        _bsSpinnerStyles() {\r\n            return {\r\n                'border-width': this.isLinear ? Helper.sizeUnit(this.spinnerThickness) : null,\r\n                'height': Helper.sizeUnit(this.spinnerDiameter),\r\n                'width': Helper.sizeUnit(this.spinnerDiameter),\r\n            }\r\n        },\r\n        _bsSpinnerClasses() {\r\n            return {\r\n                'spinner-grow': this.isGrow,\r\n                'spinner-border': this.isLinear,\r\n                ['text-' + this.spinnerColor]: this.spinnerColor\r\n            }\r\n        },\r\n        _spinnerClasses() {\r\n            return {\r\n                'align-self-center': true,\r\n                'md-spinner-rotate': true,\r\n                ['text-' + this.spinnerColor]: this.spinnerColor\r\n            }\r\n        },\r\n        _spinnerStyles() {\r\n            return {\r\n                'height': Helper.sizeUnit(this.spinnerDiameter),\r\n                'width': Helper.sizeUnit(this.spinnerDiameter),\r\n            };\r\n        },\r\n        _wrapperStyles() {\r\n            return {\r\n                'z-index': this.zIndex,\r\n                'position': this.fixedPosition ? 'fixed' : null\r\n            };\r\n        },\r\n        isLinear() {\r\n            return this.spinnerType === 'linear';\r\n        },\r\n        isProgress() {\r\n            return this.spinnerType === 'progress';\r\n        },\r\n        isSpinner() {\r\n            return this.spinnerType === 'spinner';\r\n        },\r\n        isGrow() {\r\n            return this.spinnerType === 'grow';\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-mask-loader {\r\n    @include flexbox((display: flex, align-items: center, justify-content: center));\r\n    left: 0;\r\n    top: 0;\r\n    right: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    max-height: 100%;\r\n    position: absolute;\r\n\r\n    > .#{$prefix}-spinner-rotate {\r\n        animation: md-progress-spinner-rotate 1.5s linear infinite;\r\n    }\r\n}\r\n</style>\r\n"]}]}