{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsField\\BsCombobox.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsField\\BsCombobox.vue","mtime":1625050711000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BsCombobox.vue"],"names":[],"mappingsifile":"BsCombobox.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsField","sourcesContent":["<template>\r\n  <div :class=\"_classNames\" class=\"md-field md-combobox row\">\r\n    <div\r\n      v-if=\"floatingLabel === false\"\r\n      ref=\"label\"\r\n      class=\"md-combobox-label\"\r\n      @click.stop=\"activatorClick\">\r\n      <slot v-bind=\"{ id }\"></slot>\r\n    </div>\r\n    <div class=\"md-field-wrapper\">\r\n      <div\r\n        v-if=\"prependIconOuter\"\r\n        class=\"md-prepend-icon\">\r\n        <slot name=\"prependIconOuter\">\r\n          <font-awesome-icon :icon=\"prependIconOuter\" fixed-width />\r\n        </slot>\r\n      </div>\r\n      <div class=\"md-field-ctrl\">\r\n        <div\r\n          ref=\"activator\"\r\n          class=\"md-field-inner\"\r\n          @mouseenter=\"onMouseEnter\">\r\n          <fieldset\r\n            v-if=\"outlined\"\r\n            aria-hidden=\"true\">\r\n            <legend ref=\"legend\">\r\n              <span>​</span>\r\n            </legend>\r\n          </fieldset>\r\n          <div\r\n            v-if=\"prependIcon\"\r\n            class=\"md-prepend-icon\">\r\n            <slot name=\"prependIcon\">\r\n              <font-awesome-icon :icon=\"prependIcon\" fixed-width />\r\n            </slot>\r\n          </div>\r\n          <div\r\n            class=\"md-field-input-wrapper\"\r\n            tabindex=\"0\"\r\n            @blur=\"_onBlur\"\r\n            @click=\"activatorClick\"\r\n            @focus=\"_onFocus\">\r\n            <div\r\n              v-if=\"floatingLabel\"\r\n              ref=\"floatLabel\"\r\n              :class=\"_floatingLabelClass\"\r\n              class=\"md-field-label\">\r\n              <slot v-bind=\"{ id }\" />\r\n            </div>\r\n            <div class=\"md-combobox-input\">\r\n              <span\r\n                v-if=\"_showPlaceHolder\"\r\n                class=\"md-placeholder\">{{ placeholder }}</span>\r\n              <div\r\n                v-else-if=\"chipEnabled && multiple\"\r\n                class=\"md-input-tags\">\r\n                <bs-chip\r\n                  v-for=\"(item, index) in selectedItems\"\r\n                  :key=\"'chip-' + index\"\r\n                  :color=\"chipColor\"\r\n                  :disabled=\"disabled\"\r\n                  :label=\"chipLabeled\"\r\n                  :outlined=\"chipOutlined\">\r\n                  {{ getItemText(item) }}\r\n                </bs-chip>\r\n              </div>\r\n              <span class=\"md-value\" v-else>{{ inputDisplay }}</span>\r\n            </div>\r\n            <select v-bind=\"_inputAttributes\" class=\"d-none\">\r\n              <option\r\n                v-for=\"(item, index) in selectedItems\"\r\n                :key=\"'item-' + index\"\r\n                :value=\"getItemValue(item)\"\r\n                selected>\r\n                {{ getItemText(item) }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <div class=\"md-action-icon\">\r\n            <transition name=\"fade\">\r\n              <bs-icon\r\n                v-if=\"_showClearButton\"\r\n                height=\"24\"\r\n                icon=\"clear\"\r\n                @click=\"clearSelected\" />\r\n            </transition>\r\n            <bs-icon\r\n              icon=\"expand_more\"\r\n              size=\"24\"\r\n              @click=\"activatorClick\" />\r\n          </div>\r\n          <div\r\n            v-if=\"appendIcon\"\r\n            class=\"md-append-icon\">\r\n            <slot name=\"appendIcon\">\r\n              <font-awesome-icon :icon=\"appendIcon\" fixed-width />\r\n            </slot>\r\n          </div>\r\n        </div>\r\n        <div\r\n          v-if=\"helpText || showErrorValidation\"\r\n          class=\"md-help-text\">\r\n          <transition name=\"fade\">\r\n            <slot name=\"helpText\">\r\n              <small\r\n                v-if=\"showHelpText\"\r\n                class=\"text-muted d-block\">\r\n                {{ helpText }}\r\n              </small>\r\n            </slot>\r\n          </transition>\r\n          <template v-if=\"hasValidationError\">\r\n            <small\r\n              v-for=\"(fld) in errorItems\"\r\n              :key=\"fld\"\r\n              class=\"text-danger d-block\">\r\n              {{ _validationMessage(fld) }}\r\n            </small>\r\n          </template>\r\n        </div>\r\n      </div>\r\n      <div\r\n        v-if=\"appendIconOuter\"\r\n        class=\"md-append-icon\">\r\n        <slot name=\"appendIconOuter\">\r\n          <font-awesome-icon :icon=\"appendIconOuter\" fixed-width />\r\n        </slot>\r\n      </div>\r\n    </div>\r\n    <bs-popover\r\n      ref=\"content\"\r\n      v-bind=\"_popoverAttributes\"\r\n      class=\"md-combobox-popover md-shadow-1\"\r\n      @close=\"hideMenu\">\r\n      <bs-combobox-list-container\r\n        v-bind=\"_listContainerAttributes\"\r\n        @data-filtered=\"_onFilterData\"\r\n        @item-selected=\"_onSelectItem\"\r\n        @item-deselected=\"_onDeselectItem\">\r\n        <template #emptyDataMessage>\r\n          <slot name=\"emptyData\">\r\n            <bs-list-tile-title>{{ emptyDataMessage }}</bs-list-tile-title>\r\n          </slot>\r\n        </template>\r\n        <template #optionItem=\"{ item, index }\">\r\n          <slot v-bind=\"{ item, index }\" name=\"optionItem\">\r\n            <bs-list-tile-title>{{ getItemText(item) }}</bs-list-tile-title>\r\n          </slot>\r\n        </template>\r\n      </bs-combobox-list-container>\r\n    </bs-popover>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\r\nimport BsComboboxListContainer from \"./BsComboboxListContainer\";\r\nimport BsListTileTitle from \"../BsList/BsListTileTitle\";\r\nimport BsIcon from \"../BsIcon/BsIcon\";\r\nimport BsChip from \"../BsBasic/BsChip\";\r\nimport BsPopover from \"../BsPopover/BsPopover\";\r\nimport AbstractStore from \"../../model/AbstractStore\";\r\nimport Input from \"./mixins/Input\";\r\nimport MenuAble from \"../../mixins/MenuAble\";\r\nimport FieldValidation from \"./mixins/FieldValidation\";\r\nimport Helper from \"../../utils/Helper\";\r\nimport \"../../../scss/_field.scss\"\r\nimport '../../../scss/utilities/_shadows.scss';\r\n\r\nexport default {\r\n    name: \"BsCombobox\",\r\n    components: {\r\n        FontAwesomeIcon, BsComboboxListContainer, BsIcon, BsChip, BsPopover,\r\n        BsListTileTitle,\r\n    },\r\n    mixins: [Input, MenuAble, FieldValidation],\r\n    props: {\r\n        /**\r\n         * Sets icon to display on inner right side. Use any valid\r\n         * [FontAwesome](https://fontawesome.com/icons?d=gallery&s=solid&m=free) icon name.\r\n         * @type {string|*}\r\n         */\r\n        appendIcon: {\r\n            type: [String, Array],\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets icon to display on outer right side. Use any valid\r\n         * [FontAwesome](https://fontawesome.com/icons?d=gallery&s=solid&m=free) icon name.\r\n         * @type {string|*}\r\n         */\r\n        appendIconOuter: {\r\n            type: [String, Array],\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets the checkbox color for ListBox options.\r\n         * @type {string|*}\r\n         */\r\n        checkOptionColor: {\r\n            type: String,\r\n            default: 'purple'\r\n        },\r\n        /**\r\n         * Sets the checkbox position for ListBox options. Valid values are: `left`, `right`.\r\n         * @type {string|*}\r\n         */\r\n        checkOptionPosition: {\r\n            type: String,\r\n            default: 'left',\r\n            validator(value) {\r\n                return ['left', 'right'].indexOf(value) > -1;\r\n            }\r\n        },\r\n        /**\r\n         * Sets auto show the clear button.\r\n         * @type {boolean|*}\r\n         */\r\n        clearButton: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets data source for the ListBox options.\r\n         * @type {Object|*}\r\n         */\r\n        dataSource: {\r\n            type: Object,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets the **no data message** when ListBox options is empty.\r\n         * @type {string|*}\r\n         */\r\n        emptyDataMessage: {\r\n            type: String,\r\n            default: 'No data to display.'\r\n        },\r\n        /**\r\n         * Sets the ListBox background color.\r\n         * @type {string|*}\r\n         */\r\n        listboxColor: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets the ListBox background color.\r\n         * @type {number|string|*}\r\n         */\r\n        minimumItemsForSearch: {\r\n            type: [Number, String],\r\n            default: 15,\r\n            validator: value => parseInt(value, 10) > 0\r\n        },\r\n        /**\r\n         * Enable/disable multi selection.\r\n         * @type {boolean|*}\r\n         */\r\n        multiple: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets the **not found message** when searching returns no result.\r\n         * @type {string|*}\r\n         */\r\n        notFoundMessage: {\r\n            type: String,\r\n            default: 'Data not found.'\r\n        },\r\n        /**\r\n         * Sets the cascading combobox parent value.\r\n         * @type {string|number|boolean|Array|*}\r\n         */\r\n        parentValue: {\r\n            type: [String, Boolean, Number, Array],\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Keeps help text visible when the component is not focused.\r\n         * @type {boolean|*}\r\n         */\r\n        persistentHelpText: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Sets the field placeholder.\r\n         * @type {string|*}\r\n         */\r\n        placeholder: {\r\n            type: String,\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets maximum height for the Popover or ListBox container.\r\n         * @type {number|string|*}\r\n         */\r\n        popoverMaxHeight: {\r\n            type: [String, Number],\r\n            default: 300,\r\n            validator: value => parseInt(value, 10) > 0\r\n        },\r\n        /**\r\n         * Sets minimum width for the Popover or ListBox container.\r\n         * @type {number|string|*}\r\n         */\r\n        popoverMinWidth: {\r\n            type: [String, Number],\r\n            default: undefined,\r\n            validator: value => parseInt(value, 10) > 0\r\n        },\r\n        /**\r\n         * Sets icon to display on inner left side. Use any valid\r\n         * [FontAwesome](https://fontawesome.com/icons?d=gallery&s=solid&m=free) icon name.\r\n         * @type {string|*}\r\n         */\r\n        prependIcon: {\r\n            type: [String, Array],\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets icon to display on outer left side. Use any valid\r\n         * [FontAwesome](https://fontawesome.com/icons?d=gallery&s=solid&m=free) icon name.\r\n         * @type {string|*}\r\n         */\r\n        prependIconOuter: {\r\n            type: [String, Array],\r\n            default: undefined\r\n        },\r\n        /**\r\n         * Sets **Chip** style for the selected items.\r\n         * @type {boolean|*}\r\n         */\r\n        chipEnabled: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * The default Chips color to apply.\r\n         * @type {string|*}\r\n         */\r\n        chipColor: {\r\n            type: String,\r\n            default: 'light-grey'\r\n        },\r\n        /**\r\n         * Remove Chip's circle edges.\r\n         * @type {boolean|*}\r\n         */\r\n        chipLabeled: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Render Chips with outlined style or not.\r\n         * @type {boolean|*}\r\n         */\r\n        chipOutlined: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create the component with **flat** appearance, and removes the borders.\r\n         * The component appearance will be styled like plain text.\r\n         * @type {boolean|*}\r\n         */\r\n        flat: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create the component with **filled** appearance.\r\n         * See [Google Material Design](https://material.io/components/text-fields) spec.\r\n         * @type {boolean|*}\r\n         */\r\n        filled: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create the component with **outlined** appearance.\r\n         * See [Google Material Design](https://material.io/components/text-fields) spec.\r\n         * @type {boolean|*}\r\n         */\r\n        outlined: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Create the component with floating field label.\r\n         * See [Google Material Design](https://material.io/components/text-fields) spec.\r\n         * @type {boolean|*}\r\n         */\r\n        floatingLabel: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Show or hide the ListBox item separator.\r\n         * @type {boolean|*}\r\n         */\r\n        itemSeparator: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets the image size for each ListBox items when `show-image` is enabled.\r\n         * @type {number|string|*}\r\n         */\r\n        imageSize: {\r\n            type: [Number, String],\r\n            default: undefined,\r\n            validator: value => parseInt(value, 10) > 0\r\n        },\r\n        /**\r\n         * Show or hide image if ListBox item's object contains image field.\r\n         * @type {boolean|*}\r\n         */\r\n        showImage: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets **rounded** effect for the displayed image from ListBox item.\r\n         * @type {boolean|*}\r\n         */\r\n        roundedImage: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets **circle** effect for the displayed image from ListBox item.\r\n         * @type {boolean|*}\r\n         */\r\n        circleImage: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Sets transition animation when showing the Popover.\r\n         * @type {string|*}\r\n         */\r\n        transition: {\r\n            type: String,\r\n            default: BsPopover.props.transition.default\r\n        },\r\n        /**\r\n         * Sets the returns value from `v-model` as object.\r\n         * @type {boolean|*}\r\n         */\r\n        valueAsObject: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    data: (vm) => ({\r\n        dataModel: {},\r\n        /**\r\n         * Default data model schema.\r\n         * @type {Object}\r\n         */\r\n        defaultSchema: {\r\n            displayField: 'text',\r\n            valueField: 'value',\r\n            imageField: 'image',\r\n            cascadeField: 'parent',\r\n            disableField: 'disabled'\r\n        },\r\n        popoverWidth: vm.popoverMinWidth ? vm.popoverMinWidth : 0,\r\n        popoverPlacement: 'bottom',\r\n        dataFetched: false,\r\n        isFocused: false,\r\n        inputDisplay: '',\r\n        inputValue: vm.value,\r\n        selectedItems: [],\r\n        trigger: null\r\n    }),\r\n    provide() {\r\n        return {\r\n            dataModel: this.dataModel,\r\n            getItemValue: this.getItemValue,\r\n            getItemText: this.getItemText,\r\n            hasProperty: this.hasProperty,\r\n            itemPropertyValue: this.itemPropertyValue\r\n        }\r\n    },\r\n    computed: {\r\n        /**\r\n         * Get computed component's styles.\r\n         *\r\n         * @returns {Object|*} Collection of css classes\r\n         * @private\r\n         */\r\n        _classNames() {\r\n            return {\r\n                ...this.cmpAttrClasses,\r\n                'md-open': this.active,\r\n                'md-field-flat': this.flat,\r\n                'md-field-filled': this.filled,\r\n                'md-field-outlined': this.outlined,\r\n                'md-chip-enabled': this.chipEnabled,\r\n                'md-floating-label': this.floatingLabel,\r\n                'md-focused': (this.isFocused || this.active) && !this.disabled,\r\n                'has-error': this.hasValidationError,\r\n                'has-success': this.hasValidated && !this.hasValidationError,\r\n            };\r\n        },\r\n        /**\r\n         * Get computed binding's properties.\r\n         *\r\n         * @returns {Object|*} Attributes to bind\r\n         * @private\r\n         */\r\n        _inputAttributes() {\r\n            return {\r\n                ...this.cmpAttrs,\r\n                'tabindex': -1,\r\n                'aria-hidden': true,\r\n                'multiple': this.multiple,\r\n                'aria-required': this.required,\r\n                'aria-disabled': this.disabled\r\n            };\r\n        },\r\n        /**\r\n         * Check if feature clear button is enabled or not.\r\n         *\r\n         * @returns {boolean} TRUE if has clear button otherwise FALSE\r\n         * @private\r\n         */\r\n        _showClearButton() {\r\n            return this.clearButton && !this.readonly && !this.disabled && this.selectedItems.length > 0;\r\n        },\r\n        /**\r\n         * @returns {boolean} Display placeholder or not\r\n         * @private\r\n         */\r\n        _showPlaceHolder() {\r\n            return !this.inputValue;\r\n        },\r\n        /**\r\n         * Get computed floating label's class names.\r\n         *\r\n         * @returns {Object|*} Floating label css classes\r\n         * @private\r\n         */\r\n        _floatingLabelClass() {\r\n            return {\r\n                'md-active': this.placeholder || this.active || this.selectedItems.length > 0,\r\n            }\r\n        },\r\n        /**\r\n         * Get combobox list container binding attributes.\r\n         *\r\n         * @returns {Object|*} Attributes to bind\r\n         * @private\r\n         */\r\n        _listContainerAttributes() {\r\n            return {\r\n                active: this.active,\r\n                disabled: this.disabled,\r\n                itemSeparator: this.itemSeparator,\r\n                multiple: this.multiple,\r\n                showImage: this.showImage,\r\n                roundedImage: this.roundedImage,\r\n                circleImage: this.circleImage,\r\n                imageSize: this.imageSize,\r\n                listboxColor: this.listboxColor,\r\n                checkOptionColor: this.checkOptionColor,\r\n                checkOptionPosition: this.checkOptionPosition,\r\n                dataItems: this.dataItems,\r\n                selectedItems: this.selectedItems,\r\n                cascadeField: this.cascadeField,\r\n                disableField: this.disableField,\r\n                displayField: this.displayField,\r\n                imageField: this.imageField,\r\n                valueField: this.valueField,\r\n                maxHeight: this.popoverMaxHeight,\r\n                minimumItemsForSearch: this.minimumItemsForSearch ? parseInt(this.minimumItemsForSearch) : undefined,\r\n                emptyDataMessage: this.emptyDataMessage,\r\n                notFoundMessage: this.notFoundMessage,\r\n                style: this._popoverStyles\r\n            }\r\n        },\r\n        /**\r\n         * Get Popover computed binding attributes.\r\n         *\r\n         * @returns {Object|*} Attributes to bind\r\n         * @private\r\n         */\r\n        _popoverAttributes() {\r\n            return {\r\n                open: this.active,\r\n                placement: this.popoverPlacement,\r\n                transition: this.transition,\r\n                trigger: this.trigger,\r\n                style: this._popoverStyles,\r\n                space: this.outlined ? 2 : 0,\r\n                class: {\r\n                    ['bg-' + this.listboxColor]: this.listboxColor\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Get popover's computed width.\r\n         *\r\n         * @returns {number} Popover minimum width\r\n         * @private\r\n         */\r\n        _popoverMinWidth() {\r\n            if (this.trigger && (this.popoverWidth < this.trigger.offsetWidth)) {\r\n                return this.trigger.offsetWidth;\r\n            }\r\n\r\n            return this.popoverWidth;\r\n        },\r\n        /**\r\n         * Get computed popover's styles.\r\n         *\r\n         * @returns {Object} Popover styles\r\n         * @private\r\n         */\r\n        _popoverStyles() {\r\n            return {\r\n                'min-width': this.trigger ? Helper.sizeUnit(this._popoverMinWidth) : '',\r\n                'max-height': Helper.sizeUnit(this.popoverMaxHeight)\r\n            }\r\n        },\r\n        /**\r\n         * Get data items.\r\n         *\r\n         * @returns {Object[]} Items\r\n         */\r\n        dataItems() {\r\n            return this.dataSource ? this.dataSource.proxy.dataItems : [];\r\n        },\r\n        /**\r\n         * Get property cascade field name from data schema.\r\n         *\r\n         * @returns {string} A field name\r\n         */\r\n        cascadeField() {\r\n            return this.dataModel.cascadeField;\r\n        },\r\n        /**\r\n         * Get property disabled field name from data schema.\r\n         *\r\n         * @returns {string} A field name\r\n         */\r\n        disableField() {\r\n            return this.dataModel.disableField;\r\n        },\r\n        /**\r\n         * Get property display/text field name from data schema.\r\n         *\r\n         * @returns {string} A field name\r\n         */\r\n        displayField() {\r\n            return this.dataModel.displayField;\r\n        },\r\n        /**\r\n         * Get property image field name from data schema.\r\n         *\r\n         * @returns {string} A field name\r\n         */\r\n        imageField() {\r\n            return this.dataModel.imageField;\r\n        },\r\n        /**\r\n         * Check if helpText will be shown or not.\r\n         *\r\n         * @returns {boolean} TRUE to show help text otherwise FALSE\r\n         */\r\n        showHelpText() {\r\n            if (this.externalValidator && this.externalValidator.hasError && !this.wasValidated) {\r\n                this.wasValidated = true;\r\n            }\r\n\r\n            return !!(this.helpText && (this.persistentHelpText || this.isFocused || this.active));\r\n        },\r\n        /**\r\n         * Get property value field name from data schema.\r\n         *\r\n         * @returns {string} A field name\r\n         */\r\n        valueField() {\r\n            return this.dataModel.valueField;\r\n        },\r\n        /**\r\n         * Create getter and setter for v-model\r\n         */\r\n        model: {\r\n            get() {\r\n                if (this.multiple && this.valueAsObject) {\r\n                    return this.selectedItems;\r\n                } else if (!this.multiple && this.valueAsObject) {\r\n                    return this.selectedItems.slice(0, 1);\r\n                }\r\n\r\n                return this.inputValue;\r\n            },\r\n            set(value) {\r\n                const ctor = value.constructor.toString().match(/function (\\w*)/)[1].toLowerCase();\r\n                if (ctor !== 'inputevent' && ctor !== 'changeevent') {\r\n                    this.inputValue = value;\r\n                    this.$emit('input', value);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        active(value) {\r\n            if (value && !this.popoverMinWidth) {\r\n                this.popoverWidth = this.trigger.offsetWidth;\r\n            }\r\n            this._updateLegend(value);\r\n        },\r\n        parentValue(newValue) {\r\n            if (!Helper.isEmpty(this.cascadeField) && newValue !== undefined) {\r\n                Helper.defer(() => {\r\n                    this.dataFetched = false;\r\n                    this.clearSelected();\r\n                    this._fetchData();\r\n                }, 100);\r\n            }\r\n        },\r\n        value(newValue) {\r\n            this.inputValue = newValue;\r\n            this._updateLegend(newValue);\r\n            this._setSelectedItems();\r\n        }\r\n    },\r\n    created() {\r\n        this._fetchData();\r\n    },\r\n    mounted() {\r\n        this._updateLabel();\r\n        this._updateValue();\r\n        this._updateLegend();\r\n    },\r\n    beforeDestroy() {\r\n        this.selectedItems = [];\r\n        this.dataModel = null;\r\n    },\r\n    methods: {\r\n        /**\r\n         * Remove all selected items.\r\n         *\r\n         * @returns {Array} The deleted items\r\n         */\r\n        clearSelected() {\r\n            const results = this.selectedItems.splice(0, this.selectedItems.length);\r\n            this._computeInternalValues();\r\n            this.$emit('input', this.inputValue);\r\n\r\n            return results;\r\n        },\r\n        /**\r\n         * Get value from the given item.\r\n         *\r\n         * @param {Object|Array|string|number} item The given item\r\n         * @returns {string|boolean|number} The item value\r\n         */\r\n        getItemValue(item) {\r\n            if (Helper.isPrimitive(item)) {\r\n                return item;\r\n            } else if (Helper.isArray(item)) {\r\n                return item[0];\r\n            }\r\n\r\n            return Helper.getObjectValueByPath(\r\n                item, this.valueField, this.itemPropertyValue(item, this.displayField)\r\n            );\r\n        },\r\n        /**\r\n         * Get display text from the given item.\r\n         *\r\n         * @param {Object|Array|string|number} item The given item\r\n         * @returns {string|boolean|number} The text to display\r\n         */\r\n        getItemText(item) {\r\n            if (Helper.isPrimitive(item)) {\r\n                return item;\r\n            } else if (Helper.isArray(item)) {\r\n                return item[1] ? item[1] : item[0];\r\n            }\r\n\r\n            return Helper.getObjectValueByPath(\r\n                item, this.displayField, this.itemPropertyValue(item, this.valueField)\r\n            );\r\n        },\r\n        /**\r\n         * Check if the given object has a property or not.\r\n         *\r\n         * @param {Object} item  The object to evaluate\r\n         * @param {string} field The property name to check\r\n         * @returns {boolean} TRUE if has the property otherwise false\r\n         */\r\n        hasProperty(item, field) {\r\n            const ret = Helper.getObjectValueByPath(item, field);\r\n\r\n            return (ret !== null && ret !== undefined);\r\n        },\r\n        /**\r\n         * Get object property value from the given item.\r\n         *\r\n         * @param {Object} item           The object to evaluate\r\n         * @param {String|Function} field The property name\r\n         * @returns {string|boolean|number} The property value\r\n         */\r\n        itemPropertyValue(item, field) {\r\n            return Helper.getObjectValueByPath(item, field);\r\n        },\r\n        /**\r\n         * Compute and join the selected array values.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _computeInternalValues() {\r\n            let values = [], text = [];\r\n            this.selectedItems.forEach(item => {\r\n                values.push(this.getItemValue(item));\r\n                text.push(this.getItemText(item));\r\n            });\r\n            this.inputValue = this.multiple\r\n                ? (values.length > 0 ? values : null)\r\n                : (values.length > 0 ? values[0] : null);\r\n            this.inputDisplay = text.join(', ');\r\n        },\r\n        /**\r\n         * Fetch data from static data source or remote server.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _fetchData() {\r\n            const ds = this.dataSource;\r\n            let doFetch = false;\r\n\r\n            if (ds !== undefined) {\r\n                if (ds.schema && ds.schema.valueField) {\r\n                    this.dataModel = Object.assign(this.dataModel, ds.schema);\r\n                    if (Helper.isEmpty(ds.schema.displayField)) {\r\n                        this.dataModel.displayField = this.dataModel.valueField;\r\n                    }\r\n                } else {\r\n                    // assign with default schema\r\n                    this.dataModel = Object.assign(this.dataModel, this.defaultSchema);\r\n                }\r\n                if (!this.dataFetched && Helper.isObject(ds.proxy) && ds.proxy instanceof AbstractStore) {\r\n                    if (!Helper.isEmpty(this.parentValue) && !Helper.isEmpty(this.cascadeField)) {\r\n                        ds.proxy.setFilters({\r\n                            'property': this.cascadeField,\r\n                            'value': this.parentValue,\r\n                            'operator': Helper.isArray(this.parentValue) ? 'in' : 'eq'\r\n                        }, true);\r\n                        doFetch = true;\r\n                    } else if (Helper.isEmpty(this.parentValue) &&\r\n                        (Helper.isEmpty(this.cascadeField) || this.cascadeField === 'parent')) {\r\n                        doFetch = true;\r\n                    }\r\n                    if (doFetch) {\r\n                        ds.proxy.load().then(() => {\r\n                            this.$emit('data-bind', this.dataModel.items);\r\n                            this.dataFetched = true;\r\n                            this._updateValue();\r\n                        }).catch((error) => {\r\n                            this.$emit('data-error', error);\r\n                            this.dataFetched = false;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Set attribute \"for\" for the given element.\r\n         *\r\n         * @param {Element} elm The DOM element\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _setLabelFor(elm) {\r\n            if (elm && !elm.hasAttribute('for')) {\r\n                elm.setAttribute('for', this.id);\r\n            }\r\n        },\r\n        /**\r\n         * Compute selected items in the combobox.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _setSelectedItems() {\r\n            const items = this.dataItems;\r\n            this.selectedItems = [];\r\n\r\n            if (this.inputValue) {\r\n                if (Helper.isArray(this.inputValue)) {\r\n                    items.forEach(el => {\r\n                        this.inputValue.forEach(it => {\r\n                            if (Helper.isObject(it) && this.getItemValue(it) === this.getItemValue(el)) {\r\n                                this.selectedItems.push(el);\r\n                            } else if (Helper.isPrimitive(it) && it === this.getItemValue(el)) {\r\n                                this.selectedItems.push(el);\r\n                            }\r\n                        })\r\n                    });\r\n                } else {\r\n                    this.selectedItems = items.filter(el =>\r\n                        (this.inputValue === this.getItemValue(el)) ||\r\n                        (this.getItemValue(el) === this.getItemValue(this.inputValue))\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._computeInternalValues();\r\n        },\r\n        /**\r\n         * Update combobox label.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateLabel() {\r\n            let label;\r\n            this.trigger = this.$refs.activator;\r\n\r\n            if (!this.floatingLabel && this.$refs.label.children.length > 0) {\r\n                const elm = this.$refs.label.children[0];\r\n                // label = this.$refs.label.querySelector('label');\r\n                this.$refs.label.className += ' ' + elm.className;\r\n                elm.className = 'md-empty-class';\r\n                // this._setLabelFor(label);\r\n            } else if (this.floatingLabel && this.$refs.floatLabel.children) {\r\n                const children = this.$refs.floatLabel.children;\r\n\r\n                if (children.length > 0) {\r\n                    label = this.$refs.floatLabel.children[0];\r\n                    if (!Helper.isEmpty(label.classList) && !Helper.isEmpty(label.className)) {\r\n                        label.className = 'md-empty-class';\r\n                    }\r\n                }\r\n                // label = this.$refs.floatLabel.querySelector('label');\r\n                // this._setLabelFor(label);\r\n            }\r\n        },\r\n        _updateLegend(value) {\r\n            if (this.outlined && this.$refs.legend) {\r\n                const label = this.floatingLabel\r\n                    ? this.$refs.floatLabel\r\n                    : this.$el.querySelector('label');\r\n                const hasWidth = this.floatingLabel && (this.active || this.placeholder || this.inputValue || value);\r\n\r\n                if (hasWidth && label) {\r\n                    const width = label.clientWidth < 80 ? label.clientWidth : label.clientWidth - 8;\r\n                    this.$refs.legend.style.width = Helper.sizeUnit(width);\r\n                } else {\r\n                    this.$refs.legend.style.width = Helper.sizeUnit(0);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Update computed values.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateValue() {\r\n            if (this.value) {\r\n                this.inputValue = this.value;\r\n                this._setSelectedItems();\r\n            }\r\n        },\r\n        /**\r\n         * Handler for event data filtering.\r\n         *\r\n         * @param {Array} items The filtered items\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _onFilterData(items) {\r\n            this.$emit('data-filter', items);\r\n        },\r\n        _onFocus() {\r\n            this.isFocused = true;\r\n            this._updateLegend();\r\n        },\r\n        _onBlur() {\r\n            this.isFocused = false;\r\n            this._updateLegend();\r\n        },\r\n        /**\r\n         * Handler when an item within combobox is deselected.\r\n         *\r\n         * @param {Object} item The unselected item\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _onDeselectItem(item) {\r\n            const ds = this.selectedItems;\r\n\r\n            if (ds.includes(item)) {\r\n                this.selectedItems = ds.filter(target => target !== item);\r\n                this.$emit('deselect', item);\r\n            }\r\n            this._computeInternalValues();\r\n            if (!this.multiple) {\r\n                this.active = false;\r\n            }\r\n            if (this.inputValue === null) {\r\n                this.$emit('input', null);\r\n            } else {\r\n                if (this.valueAsObject) {\r\n                    this.model = this.multiple ? this.selectedItems : this.selectedItems[0];\r\n                } else {\r\n                    this.model = this.inputValue;\r\n                }\r\n            }\r\n\r\n            this.$nextTick(() => {\r\n                this.$emit('change', null, item);\r\n            });\r\n        },\r\n        /**\r\n         * Handler when an item within combobox is selected.\r\n         *\r\n         * @param {Object} item The selected item\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _onSelectItem(item) {\r\n            let oldItem;\r\n            const ds = this.selectedItems;\r\n\r\n            if (this.multiple) {\r\n                oldItem = this.selectedItems.length > 0 ? this.selectedItems[this.selectedItems.length - 1] : null;\r\n                if (!ds.includes(item)) {\r\n                    this.selectedItems.push(item);\r\n                }\r\n                this.$emit('select', this.selectedItems);\r\n            } else {\r\n                oldItem = this.selectedItems.pop();\r\n                this.selectedItems.push(item);\r\n                this.$emit('select', this.selectedItems[0]);\r\n            }\r\n\r\n            this._computeInternalValues();\r\n            if (!this.multiple) {\r\n                this.active = false;\r\n            }\r\n            if (this.valueAsObject) {\r\n                this.model = this.multiple ? this.selectedItems : this.selectedItems[0];\r\n            } else {\r\n                this.model = this.inputValue;\r\n            }\r\n\r\n            this.$nextTick(() => {\r\n                this.$emit('change', item, oldItem);\r\n            });\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-combobox {\r\n    .#{$prefix}-field-input-wrapper {\r\n        @include align-items(center);\r\n        outline: none;\r\n        min-height: 40px;\r\n\r\n        > .#{$prefix}-combobox-input {\r\n            padding: .5rem 0;\r\n        }\r\n    }\r\n\r\n    .#{$prefix}-combobox-label,\r\n    .col-form-label {\r\n        label {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n\r\n    .#{$prefix}-placeholder {\r\n        @include user-select(none);\r\n        cursor: default !important;\r\n        color: $gray-600;\r\n        font-weight: $font-weight-light;\r\n    }\r\n\r\n    .#{$prefix}-input-tags {\r\n        margin: .25rem 0 0 0;\r\n    }\r\n\r\n    .#{$prefix}-value {\r\n        pointer-events: none;\r\n    }\r\n\r\n    .#{$prefix}-action-icon {\r\n        > .icon-expand-more {\r\n            @include transition(all 0.3s ease 0s);\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-disabled {\r\n        .#{$prefix}-action-icon {\r\n            > .icon-expand-more {\r\n                color: $gray-500;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-required {\r\n        .#{$prefix}-combobox-label,\r\n        .col-form-label {\r\n            font-weight: bold;\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-focused {\r\n        &:not(.#{$prefix}-disabled) {\r\n            .#{$prefix}-action-icon > .icon-expand-more {\r\n                color: $blue-darken-3 !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.has-success {\r\n        .#{$prefix}-combobox-label {\r\n            color: $success-color-dark !important;\r\n        }\r\n\r\n    }\r\n\r\n    &.has-error {\r\n        .#{$prefix}-combobox-label {\r\n            color: $danger-color-dark !important;\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-open {\r\n        .#{$prefix}-action-icon > .icon-expand-more {\r\n            @include transform(rotateZ(-180deg));\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-field-filled {\r\n        &.#{$prefix}-floating-label {\r\n            .#{$prefix}-field-input-wrapper {\r\n                min-height: 50px;\r\n\r\n                > .#{$prefix}-combobox-input {\r\n                    padding-top: 18px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &.#{$prefix}-chip-enabled {\r\n        .#{$prefix}-field-input-wrapper {\r\n            min-height: 2.75rem;  // 40px\r\n\r\n            > .#{$prefix}-combobox-input {\r\n                padding: 0;\r\n\r\n                > .#{$prefix}-input-tags {\r\n                    > .#{$prefix}-chip {\r\n                        margin: .15rem $padding-sm .25rem 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        &.#{$prefix}-floating-label {\r\n            &.#{$prefix}-field-filled {\r\n                .#{$prefix}-field-inner {\r\n                    padding-bottom: 0;\r\n\r\n                    > .#{$prefix}-field-input-wrapper {\r\n                        min-height: 3.65rem; // 59px\r\n\r\n                        > .#{$prefix}-combobox-input {\r\n                            padding-top: .7rem;\r\n                        }\r\n\r\n                        > .#{$prefix}-field-label {\r\n                            top: 1rem;\r\n\r\n                            &.#{$prefix}-active {\r\n                                @include transform(translateY(-16px) scale(.8));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            &.#{$prefix}-field-outlined {\r\n                .#{$prefix}-field-inner {\r\n                    padding-bottom: .125rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.#{$prefix}-combobox-popover {\r\n    border: 1px solid rgba($black, 0.1) !important;\r\n    border-right-width: 0 !important;\r\n    overflow: hidden !important;\r\n\r\n    > .#{$prefix}-combobox-list-container {\r\n        background-color: $white;\r\n        overflow: hidden;\r\n\r\n        > .#{$prefix}-combobox-search-wrapper {\r\n            display: block;\r\n            padding: 6px;\r\n            margin: 0;\r\n\r\n            > .#{$prefix}-combobox-search {\r\n                border: 1px solid $gray-500;\r\n                color: $gray-800;\r\n                font-size: 14px;\r\n                outline: none;\r\n                padding: 6px 8px;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@each $color_name, $color in $material-colors {\r\n    .#{$prefix}-combobox-popover {\r\n        &.bg-#{$color_name} {\r\n            .#{$prefix}-combobox-search-wrapper {\r\n                > .#{$prefix}-combobox-search {\r\n                    @if (lightness($color) < 81) {\r\n                        background-color: rgba(lighten($color, 20%), .25);\r\n                        border-color: rgba($gray-500, .6) !important;\r\n                        color: darken($white-base, 10%) !important;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@each $color_name, $color in $theme-colors {\r\n    .#{$prefix}-combobox-popover {\r\n        &.bg-#{$color_name} {\r\n            .#{$prefix}-combobox-search-wrapper {\r\n                > .#{$prefix}-combobox-search {\r\n                    @if (lightness($color) < 81) {\r\n                        background-color: rgba(lighten($color, 20%), .25);\r\n                        border-color: rgba($gray-500, .6) !important;\r\n                        color: darken($white-base, 10%) !important;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"]}]}