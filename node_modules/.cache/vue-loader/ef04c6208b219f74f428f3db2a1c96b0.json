{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsPopover\\BsPopover.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsPopover\\BsPopover.vue","mtime":1611340314000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIi4uLy4uLy4uL3Njc3MvY29sb3JzIjsNCkBpbXBvcnQgIi4uLy4uLy4uL3Njc3MvdmFyaWFibGVzIjsNCg0KLiN7JHByZWZpeH0tcG9wb3ZlciB7DQogICAgcG9zaXRpb246IGZpeGVkOw0KICAgIG1heC1oZWlnaHQ6IDEwMCU7DQogICAgbWF4LXdpZHRoOiA4MCU7DQogICAgb3ZlcmZsb3c6IGF1dG87DQogICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOw0KDQogICAgJi50cmFuc2l0aW9uLWJvdHRvbS1sZWZ0IHsNCiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3A7DQogICAgfQ0KDQogICAgJi50cmFuc2l0aW9uLWJvdHRvbSB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciB0b3A7DQoNCiAgICAgICAgJi5zY2FsZS1lbnRlciwNCiAgICAgICAgJi5zY2FsZS1sZWF2ZS1hY3RpdmUgew0KICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZVkoLjUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgJi50cmFuc2l0aW9uLWJvdHRvbS1yaWdodCB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcDsNCiAgICB9DQoNCiAgICAmLnRyYW5zaXRpb24tdG9wLWxlZnQgew0KICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTsNCiAgICB9DQoNCiAgICAmLnRyYW5zaXRpb24tdG9wIHsNCiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTsNCg0KICAgICAgICAmLnNjYWxlLWVudGVyLA0KICAgICAgICAmLnNjYWxlLWxlYXZlLWFjdGl2ZSB7DQogICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlWSguNSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAmLnRyYW5zaXRpb24tdG9wLXJpZ2h0IHsNCiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tOw0KICAgIH0NCg0KICAgICYudHJhbnNpdGlvbi1sZWZ0LXRvcCB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcDsNCiAgICB9DQoNCiAgICAmLnRyYW5zaXRpb24tbGVmdCB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGNlbnRlcjsNCiAgICB9DQoNCiAgICAmLnRyYW5zaXRpb24tbGVmdC1ib3R0b20gew0KICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207DQogICAgfQ0KDQogICAgJi50cmFuc2l0aW9uLXJpZ2h0LXRvcCB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wOw0KICAgIH0NCg0KICAgICYudHJhbnNpdGlvbi1yaWdodCB7DQogICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyOw0KICAgIH0NCg0KICAgICYudHJhbnNpdGlvbi1yaWdodC1ib3R0b20gew0KICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTsNCiAgICB9DQp9DQo="},{"version":3,"sources":["BsPopover.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BsPopover.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsPopover","sourcesContent":["<template>\r\n  <transition :name=\"transition\">\r\n    <div\r\n      v-show=\"open\"\r\n      v-click-outside=\"clickOutSide\"\r\n      v-on=\"$listeners\"\r\n      v-resize=\"setPosition\"\r\n      v-scroll=\"{target: trigger, callback: setPosition}\"\r\n      :class=\"_classNames\"\r\n      :style=\"_styles\"\r\n      class=\"md-popover\">\r\n      <slot></slot>\r\n    </div>\r\n  </transition>\r\n</template>\r\n\r\n<script>\r\nimport clickOutside from \"../../directives/ClickOutside\";\r\nimport resize from \"../../directives/WindowResize\";\r\nimport scroll from \"../../directives/Scroll\";\r\nimport Popup from \"../../mixins/Popup\";\r\nimport \"../../../scss/_transitions.scss\";\r\n\r\nconst space = 8;\r\n\r\nexport default {\r\n    name: \"BsPopover\",\r\n    mixins: [Popup],\r\n    directives: {clickOutside, resize, scroll},\r\n    props: {\r\n        /**\r\n         * Display Popover at a position that covers the activator.\r\n         * @type {boolean|*}\r\n         */\r\n        cover: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Show backdrop overlay or not.\r\n         * @type {boolean|*}\r\n         */\r\n        overlay: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Popover display placement.\r\n         * @type {string|*}\r\n         */\r\n        placement: {\r\n            type: String,\r\n            default: 'bottom-left',\r\n            validator(value) {\r\n                return [\r\n                    'top', 'top-left', 'top-right',\r\n                    'bottom', 'bottom-left', 'bottom-right',\r\n                    'left', 'left-top', 'left-bottom',\r\n                    'right', 'right-top', 'right-bottom'\r\n                ].indexOf(value) !== -1;\r\n            }\r\n        },\r\n        /**\r\n         * Number of pixel to shift the Popover display position.\r\n         * @type {number|*}\r\n         */\r\n        space: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        /**\r\n         * Transition animation when show the Popover. This animation is effected by placement prop.\r\n         * @type {string|*}\r\n         */\r\n        transition: {\r\n            type: String,\r\n            default: 'scale'\r\n        },\r\n        /**\r\n         * HTML element to calculate the Popover display position.\r\n         * @type {string|Object|HTMLElement|*}\r\n         */\r\n        trigger: {\r\n            type: [String, Object, HTMLElement],\r\n            default: undefined\r\n        }\r\n    },\r\n    data: (vm) => ({\r\n        actualPlacement: vm.placement,\r\n    }),\r\n    mounted() {\r\n        this.setPosition();\r\n    },\r\n    watch: {\r\n        open(value) {\r\n            this.$nextTick(() => {\r\n                if (value) {\r\n                    this.setPosition();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    computed: {\r\n        _classNames() {\r\n            return [\r\n                this.getTransitionName()\r\n            ]\r\n        },\r\n        _styles() {\r\n            return {\r\n                'z-index': this.zIndex\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        clickOutSide(e) {\r\n            if (this.trigger && this.trigger.contains(e.target)) {\r\n                return;\r\n            }\r\n            this.close('clicked OutSide');\r\n        },\r\n        close(reason) {\r\n            if (!this.open) {\r\n                return;\r\n            }\r\n\r\n            this.$emit('update:open', false);\r\n            this.$emit('close', reason);\r\n        },\r\n        getLeftPosition(width, rect) {\r\n            let left = 0;\r\n            const maxLeft = window.innerWidth - space - width;\r\n\r\n            switch (this.placement) {\r\n                case 'left':\r\n                case 'left-top':\r\n                case 'left-bottom':\r\n                    left = rect.left - width - this.space;\r\n                    if (this.cover) {\r\n                        left += rect.width;\r\n                    } else if (left < space) {\r\n                        left = rect.left + rect.width + this.space;\r\n                    }\r\n                    break;\r\n                case 'right':\r\n                case 'right-top':\r\n                case 'right-bottom':\r\n                    left = this.cover\r\n                        ? rect.left\r\n                        : rect.left + rect.width > maxLeft\r\n                            ? rect.left - width - this.space\r\n                            : rect.left + rect.width + this.space;\r\n                    break;\r\n                case 'top':\r\n                case 'bottom':\r\n                    left = rect.left + rect.width / 2 - width / 2;\r\n                    break;\r\n                case 'bottom-left':\r\n                case 'top-left':\r\n                    left = rect.left;\r\n                    break;\r\n                case 'bottom-right':\r\n                case 'top-right':\r\n                    left = rect.left + rect.width - width;\r\n                    break;\r\n            }\r\n\r\n            return left;\r\n        },\r\n        getTopPosition(height, rect) {\r\n            let top = 0;\r\n            const maxTop = window.innerHeight - space - height;\r\n            const minTop = space;\r\n\r\n            switch (this.placement) {\r\n                case 'top':\r\n                case 'top-left':\r\n                case 'top-right':\r\n                    top = rect.top - height - this.space;\r\n                    if (!this.cover) {\r\n                        if (top < minTop) {\r\n                            top = rect.top + rect.height - this.space;\r\n                        }\r\n                    } else {\r\n                        top += rect.height;\r\n                    }\r\n                    break;\r\n                case 'bottom':\r\n                case 'bottom-left':\r\n                case 'bottom-right':\r\n                    top = this.cover\r\n                        ? rect.top\r\n                        : rect.top + rect.height + this.space > maxTop\r\n                            ? rect.top - height - this.space\r\n                            : rect.top + rect.height + this.space;\r\n                    break;\r\n                case 'left':\r\n                case 'right':\r\n                    top = rect.top + rect.height / 2 - height / 2;\r\n                    break;\r\n                case 'left-top':\r\n                case 'right-top':\r\n                    top = rect.top;\r\n                    break;\r\n                case 'left-bottom':\r\n                case 'right-bottom':\r\n                    top = rect.top + rect.height - height;\r\n                    break;\r\n            }\r\n            top = Math.min(maxTop, top);\r\n            top = Math.max(minTop, top);\r\n\r\n            return top;\r\n        },\r\n        getTransitionName() {\r\n            if (this.actualPlacement === undefined || this.actualPlacement === '') {\r\n                this.actualPlacement = this.placement;\r\n            }\r\n            return `transition-${this.actualPlacement}`;\r\n        },\r\n        setPosition() {\r\n            if (!this.open || !this.$el || !this.trigger) {\r\n                return;\r\n            }\r\n\r\n            const el = this.$el;\r\n            const triggerEl = this.trigger;\r\n            const rect = triggerEl.getBoundingClientRect();\r\n\r\n            if (rect.top < -rect.height || rect.top > window.innerHeight) {\r\n                this.close('overflow');\r\n            }\r\n\r\n            const maxTop = window.innerHeight - space - el.offsetHeight;\r\n            const top = this.getTopPosition(el.offsetHeight, rect);\r\n            el.style.left = this.getLeftPosition(el.offsetWidth, rect) + 'px';\r\n            el.style.top = top + 'px';\r\n\r\n            if (this.placement.startsWith('bottom') && maxTop < (rect.top + rect.height + this.space)) {\r\n                this.actualPlacement = this.placement.replace('bottom', 'top');\r\n            } else {\r\n                this.actualPlacement = this.placement;\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-popover {\r\n    position: fixed;\r\n    max-height: 100%;\r\n    max-width: 80%;\r\n    overflow: auto;\r\n    -webkit-overflow-scrolling: touch;\r\n\r\n    &.transition-bottom-left {\r\n        transform-origin: left top;\r\n    }\r\n\r\n    &.transition-bottom {\r\n        transform-origin: center top;\r\n\r\n        &.scale-enter,\r\n        &.scale-leave-active {\r\n            transform: scaleY(.5);\r\n        }\r\n    }\r\n\r\n    &.transition-bottom-right {\r\n        transform-origin: right top;\r\n    }\r\n\r\n    &.transition-top-left {\r\n        transform-origin: left bottom;\r\n    }\r\n\r\n    &.transition-top {\r\n        transform-origin: center bottom;\r\n\r\n        &.scale-enter,\r\n        &.scale-leave-active {\r\n            transform: scaleY(.5);\r\n        }\r\n    }\r\n\r\n    &.transition-top-right {\r\n        transform-origin: right bottom;\r\n    }\r\n\r\n    &.transition-left-top {\r\n        transform-origin: right top;\r\n    }\r\n\r\n    &.transition-left {\r\n        transform-origin: right center;\r\n    }\r\n\r\n    &.transition-left-bottom {\r\n        transform-origin: right bottom;\r\n    }\r\n\r\n    &.transition-right-top {\r\n        transform-origin: left top;\r\n    }\r\n\r\n    &.transition-right {\r\n        transform-origin: left center;\r\n    }\r\n\r\n    &.transition-right-bottom {\r\n        transform-origin: left bottom;\r\n    }\r\n}\r\n</style>\r\n"]}]}