{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsIcon\\BsIcon.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsIcon\\BsIcon.vue","mtime":1612612670000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIn5jb21wYXNzLXNhc3MtbWl4aW5zL2xpYi9jb21wYXNzL2NzczMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy9jb2xvcnMiOw0KQGltcG9ydCAiLi4vLi4vLi4vc2Nzcy92YXJpYWJsZXMiOw0KDQouI3skcHJlZml4fS1pY29uIHsNCiAgICBAaW5jbHVkZSBhbGlnbi1zZWxmKGNlbnRlcik7DQoNCiAgICA+IC5zdmctaW5saW5lIHsNCiAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICB9DQp9DQo="},{"version":3,"sources":["BsIcon.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"BsIcon.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsIcon","sourcesContent":["<template>\r\n  <span\r\n    v-on=\"$listeners\"\r\n    :class=\"_iconClass\"\r\n    :style=\"_iconStyles\"\r\n    class=\"md-icon\">\r\n    <svg\r\n      v-if=\"iconData\"\r\n      :class=\"_svgClass\"\r\n      :height=\"szHeight\"\r\n      :width=\"szWidth\"\r\n      :enable-background=\"iconData.enableBackground\"\r\n      class=\"svg-inline mx-auto\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\">\r\n      <g v-if=\"iconData.children\">\r\n        <template v-for=\"(item, idx) in iconData.children\">\r\n          <path \r\n            :is=\"_svgElTag(item)\"\r\n            :key=\"'svg-el-' + idx\"\r\n            v-bind=\"item\" />\r\n        </template>\r\n      </g>\r\n      <template v-else>\r\n        <path\r\n          v-for=\"(obj, k) in iconData.paths\"\r\n          :key=\"'path-' + k\"\r\n          v-bind=\"obj\" />\r\n      </template>\r\n    </svg>\r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport IconLib from \"./IconLibrary\";\r\nimport Helper from \"../../utils/Helper\";\r\nimport IconSize from \"./mixins/IconSize\";\r\nimport \"../../../scss/_others.scss\";\r\n\r\nexport default {\r\n    name: \"BsIcon\",\r\n    mixins: [IconSize],\r\n    props: {\r\n        /**\r\n         * The iconâ€™s name or alias.\r\n         * @type {string|*}\r\n         */\r\n        icon: {\r\n            type: String,\r\n            default: undefined,\r\n            required: true\r\n        },\r\n        /**\r\n         * Flip the icon, valid values are: `horizontal`, `vertical`, `both`.\r\n         * @type {string|*}\r\n         */\r\n        flip: {\r\n            type: String,\r\n            default: undefined,\r\n            validator: v => ['horizontal', 'vertical', 'both'].indexOf(v) !== -1\r\n        },\r\n        /**\r\n         * Apply **pulse** animation to the icon.\r\n         * @type {boolean|*}\r\n         */\r\n        pulse: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Rotate the icon, valid values are: `90`, `180`, `270`.\r\n         * @type {string|number|*}\r\n         */\r\n        rotation: {\r\n            type: [Number, String],\r\n            default: undefined,\r\n            validator: v => [90, 180, 270].includes(parseInt(v, 10))\r\n        },\r\n        /**\r\n         * Apply **spin** animation to the icon.\r\n         * @type {boolean|*}\r\n         */\r\n        spin: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    computed: {\r\n        /**\r\n         * Get icon css classes.\r\n         *\r\n         * @returns {string|null} Icon css class\r\n         * @private\r\n         */\r\n        _iconClass() {\r\n            const found = this.iconData;\r\n\r\n            if (!Helper.isEmpty(found)) {\r\n                return found.class;\r\n            }\r\n\r\n            return null;\r\n        },\r\n        /**\r\n         * Get icon css style dimension.\r\n         *\r\n         * @returns {Object|null} Icon css style dimension if icon data is empty\r\n         */\r\n        _iconStyles() {\r\n            if (Helper.isEmpty(this.iconData)) {\r\n                return {\r\n                    height: this.szHeight + 'px',\r\n                    width: this.szWidth + 'px',\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n        _svgClass() {\r\n            return {\r\n                'fa-spin': this.spin,\r\n                'fa-pulse': this.pulse,\r\n                'fa-flip-both': this.flip === 'both',\r\n                'fa-flip-vertical': this.flip === 'vertical',\r\n                'fa-flip-horizontal': this.flip === 'horizontal',\r\n                'fa-rotate-90': this.rotation && parseInt(this.rotation, 10) === 90,\r\n                'fa-rotate-180': this.rotation && parseInt(this.rotation, 10) === 180,\r\n                'fa-rotate-270': this.rotation && parseInt(this.rotation, 10) === 270,\r\n            }\r\n        },\r\n        /**\r\n         * Get icon data.\r\n         *\r\n         * @returns {Object|undefined} The icon data\r\n         */\r\n        iconData() {\r\n            if (Helper.isEmpty(this.icon)) {\r\n                return undefined;\r\n            }\r\n            const iconName = this.icon.toLowerCase();\r\n\r\n            return IconLib.find(item => item.name.toLowerCase() === iconName || item.aliases.includes(this.icon));\r\n        }\r\n    },\r\n    methods: {\r\n        _svgElTag(item) {\r\n            return item.rect ? 'rect' : (item.polygon ? 'polygon' : (item.polyline ? 'polyline' : 'path'));\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-icon {\r\n    @include align-self(center);\r\n\r\n    > .svg-inline {\r\n        display: flex;\r\n    }\r\n}\r\n</style>\r\n"]}]}