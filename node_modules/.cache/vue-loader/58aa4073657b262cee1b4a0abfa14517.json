{"remainingRequest":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegrid.vue","mtime":1609323794000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"O:\\WORK\\JUMIA\\vuejs\\new\\jumia-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgQnNBbGVydCBmcm9tICIuLi9Cc0Jhc2ljL0JzQWxlcnQiOw0KaW1wb3J0IEJzUHJvZ3Jlc3MgZnJvbSAiLi4vQnNBbmltYXRpb24vQnNQcm9ncmVzcyI7DQppbXBvcnQgQnNUcmVlZ3JpZEl0ZW1zIGZyb20gIi4vQnNUcmVlZ3JpZEl0ZW1zIjsNCmltcG9ydCBCc1RyZWVTdG9yZSBmcm9tICIuLi8uLi9tb2RlbC9Cc1RyZWVTdG9yZSI7DQppbXBvcnQgQnNBcnJheVN0b3JlIGZyb20gIi4uLy4uL21vZGVsL0JzQXJyYXlTdG9yZSI7DQppbXBvcnQgSGVscGVyIGZyb20gIi4uLy4uL3V0aWxzL0hlbHBlciI7DQppbXBvcnQgQ29tbW9uIGZyb20gIi4uLy4uL21peGlucy9Db21tb24iOw0KaW1wb3J0IEdyaWQgZnJvbSAiLi9taXhpbnMvR3JpZCI7DQppbXBvcnQgc3VtIGZyb20gJ2xvZGFzaC9zdW0nOw0KaW1wb3J0IHsgYWRkUmVzaXplTGlzdGVuZXIsIHJlbW92ZVJlc2l6ZUxpc3RlbmVyIH0gZnJvbSAiLi4vLi4vdXRpbHMvUmVzaXplTGlzdGVuZXIiOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogICAgbmFtZTogIkJzVHJlZWdyaWQiLA0KICAgIGNvbXBvbmVudHM6IHtCc1RyZWVncmlkSXRlbXMsIEJzUHJvZ3Jlc3MsIEJzQWxlcnR9LA0KICAgIG1peGluczogW0NvbW1vbiwgR3JpZF0sDQogICAgcHJvcHM6IHsNCiAgICAgICAgY2hpbGRyZW5GaWVsZG1hcDogew0KICAgICAgICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgICAgICAgZGVmYXVsdDogJ2NoaWxkcmVuJw0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogQHR5cGUge0JzVHJlZVN0b3JlfEJzQXJyYXlTdG9yZXwqfQ0KICAgICAgICAgKi8NCiAgICAgICAgZGF0YVNvdXJjZTogew0KICAgICAgICAgICAgdHlwZTogW0JzVHJlZVN0b3JlLCBCc0FycmF5U3RvcmVdLA0KICAgICAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkDQogICAgICAgIH0sDQogICAgICAgIGV4cGFuZERlcHRoOiB7DQogICAgICAgICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLA0KICAgICAgICAgICAgZGVmYXVsdDogMCwNCiAgICAgICAgICAgIHZhbGlkYXRvcjogdiA9PiAhaXNOYU4ocGFyc2VJbnQodiwgMTApKQ0KICAgICAgICB9LA0KICAgICAgICBleHBhbmRlZDogew0KICAgICAgICAgICAgdHlwZTogQm9vbGVhbiwNCiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlDQogICAgICAgIH0sDQogICAgfSwNCiAgICBkYXRhOiAodm0pID0+ICh7DQogICAgICAgIGNvbHVtbnNXaWR0aDogW10sDQogICAgICAgIGRhdGFGZXRjaGVkOiBmYWxzZSwNCiAgICAgICAgaXNGZXRjaGluZzogZmFsc2UsDQogICAgICAgIHRhYmxlOiB7DQogICAgICAgICAgICBjb2x1bW5zOiBbXSwNCiAgICAgICAgICAgIGNoaWxkcmVuRmllbGRtYXA6IHZtLmNoaWxkcmVuRmllbGRtYXAsDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICAqIEB0eXBlIHtCc1RyZWVTdG9yZXxCc0FycmF5U3RvcmV9DQogICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGRhdGFTb3VyY2U6IHZtLmRhdGFTb3VyY2UsDQogICAgICAgICAgICBleHBhbmREZXB0aDogdm0uZXhwYW5kRGVwdGgsDQogICAgICAgICAgICBleHBhbmRlZDogdm0uZXhwYW5kZWQsDQogICAgICAgICAgICB0YWJsZVdpZHRoOiB1bmRlZmluZWQsDQogICAgICAgICAgICAvLyBtZXRob2RzDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICAqIEZpbHRlciB0aGUgZGF0YSBiYXNlZCBvbiB0aGUgZ2l2ZW4gZmlsdGVycyBhbmQgZmlyZSBldmVudCA8dHQ+J2ZpbHRlcic8L3R0PiBhZnRlciBkYXRhIGhhcyBiZWVuIGZpbHRlcmVkLg0KICAgICAgICAgICAgICoNCiAgICAgICAgICAgICAqIEBwYXJhbSB7SUZpbHRlcltdfSBmaWx0ZXJzIC0gQ29sbGVjdGlvbiBvZiBmaWx0ZXJzIHRvIGJlIHVzZWQNCiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2dpYyAgICAgIC0gVGhlIGZpbHRlciBsb2dpYyB0byBiZSB1c2VkIChvcHRpb25hbCkNCiAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgZmlyZUV2ZW50OiB2bS5maXJlRXZlbnQNCiAgICAgICAgfQ0KICAgIH0pLA0KICAgIHByb3ZpZGUoKSB7DQogICAgICAgIGNvbnN0IF9ncmlkID0gdGhpcy50YWJsZTsNCg0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgVHJlZUdyaWQ6IF9ncmlkDQogICAgICAgIH0NCiAgICB9LA0KICAgIGNyZWF0ZWQoKSB7DQogICAgICAgIHRoaXMuX2ZldGNoRGF0YSgpOw0KICAgIH0sDQogICAgbW91bnRlZCgpIHsNCiAgICAgICAgYWRkUmVzaXplTGlzdGVuZXIodGhpcy4kZWwsIHRoaXMuX3VwZGF0ZVRhYmxlV2lkdGgpOw0KICAgICAgICB0aGlzLl91cGRhdGVCb2R5SGVpZ2h0KCk7DQogICAgfSwNCiAgICBiZWZvcmVEZXN0cm95KCkgew0KICAgICAgICByZW1vdmVSZXNpemVMaXN0ZW5lcih0aGlzLiRlbCwgdGhpcy5fdXBkYXRlVGFibGVXaWR0aCk7DQogICAgICAgIHRoaXMuY29sdW1uc1dpZHRoID0gbnVsbDsNCiAgICAgICAgdGhpcy50YWJsZS5jb2x1bW5zID0gbnVsbDsNCiAgICAgICAgdGhpcy50YWJsZSA9IG51bGw7DQogICAgfSwNCiAgICBtZXRob2RzOiB7DQogICAgICAgIC8qKg0KICAgICAgICAgKiBGZXRjaCBkYXRhIGZyb20gYXJyYXkgZGF0YSBzb3VyY2Ugb3IgcmVtb3RlIHNlcnZlci4NCiAgICAgICAgICoNCiAgICAgICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICAgICAqIEBwcml2YXRlDQogICAgICAgICAqLw0KICAgICAgICBfZmV0Y2hEYXRhKCkgew0KICAgICAgICAgICAgdGhpcy5pc0ZldGNoaW5nID0gdHJ1ZTsNCg0KICAgICAgICAgICAgaWYgKCFIZWxwZXIuaXNFbXB0eSh0aGlzLmRhdGFTb3VyY2UpKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuJHJlZnMudHJlZWl0ZW1zKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMudHJlZWl0ZW1zLnRyZWVOb2RlcyA9IFtdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UNCiAgICAgICAgICAgICAgICAgICAgLmxvYWQoKQ0KICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFGZXRjaGVkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGZXRjaGluZyA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2RhdGEtYmluZCcsIHRoaXMuZGF0YVNvdXJjZS5kYXRhSXRlbXMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuJHJlZnMudHJlZWl0ZW1zKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy50cmVlaXRlbXMucG9wdWxhdGVOb2RlcygwLCB0aGlzLmRhdGFTb3VyY2UuZGF0YUl0ZW1zKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YUZldGNoZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZldGNoaW5nID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnZXJyb3InLCBlcnJvcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLmRhdGFGZXRjaGVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgdGhpcy5pc0ZldGNoaW5nID0gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIC8qKg0KICAgICAgICAgKiBFdmVudCBoYW5kbGVyIHdoZW4gdGFibGUgYm9keSBpcyBzY3JvbGxpbmcuDQogICAgICAgICAqDQogICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIHJlY2VpdmVkIGV2ZW50DQogICAgICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAgICAgKiBAcHJpdmF0ZQ0KICAgICAgICAgKi8NCiAgICAgICAgX2hhbmRsZVNjcm9sbChlKSB7DQogICAgICAgICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZS50YXJnZXQuc2Nyb2xsTGVmdDsNCiAgICAgICAgICAgIGNvbnN0IHRoZWFkZXIgPSB0aGlzLiRyZWZzLnRoZWFkZXI7DQogICAgICAgICAgICBjb25zdCB0Zm9vdGVyID0gdGhpcy4kcmVmcy50Zm9vdGVyOw0KDQogICAgICAgICAgICBpZiAodGhlYWRlcikgew0KICAgICAgICAgICAgICAgIHRoZWFkZXIuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodGZvb3Rlcikgew0KICAgICAgICAgICAgICAgIHRmb290ZXIuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIC8qKg0KICAgICAgICAgKiBVcGRhdGUgVHJlZUdyaWQgYm9keSBoZWlnaHQuDQogICAgICAgICAqDQogICAgICAgICAqIEByZXR1cm5zIHt2b2lkfQ0KICAgICAgICAgKiBAcHJpdmF0ZQ0KICAgICAgICAgKi8NCiAgICAgICAgX3VwZGF0ZUJvZHlIZWlnaHQoKSB7DQogICAgICAgICAgICBpZiAodGhpcy5pc0ZpeGVkSGVpZ2h0ICYmICghdGhpcy5pc1NtYWxsU2NyZWVuIHx8ICF0aGlzLmZsaXBPblNtYWxsU2NyZWVuKSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRIZWlnaHQgPSB0aGlzLiRlbC5vZmZzZXRIZWlnaHQ7DQogICAgICAgICAgICAgICAgY29uc3QgdGhlYWRlckhlaWdodCA9IHRoaXMuJHJlZnMudGhlYWRlciA/IHRoaXMuJHJlZnMudGhlYWRlci5vZmZzZXRIZWlnaHQgOiAwOw0KICAgICAgICAgICAgICAgIGNvbnN0IHRmb290ZXJIZWlnaHQgPSB0aGlzLiRyZWZzLnRmb290ZXIgPyB0aGlzLiRyZWZzLnRmb290ZXIub2Zmc2V0SGVpZ2h0IDogMDsNCiAgICAgICAgICAgICAgICBjb25zdCBmb290ZXJIZWlnaHQgPSB0aGlzLiRyZWZzLmZvb3RlciA/IHRoaXMuJHJlZnMuZm9vdGVyLm9mZnNldEhlaWdodCA6IDA7DQoNCiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnRjb250ZW50LnN0eWxlLmhlaWdodCA9IChncmlkSGVpZ2h0IC0gKHRoZWFkZXJIZWlnaHQgKyB0Zm9vdGVySGVpZ2h0ICsgZm9vdGVySGVpZ2h0KSkgKyAncHgnOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogRGV0ZWN0IHNjcmVlbiBzaXplIGFuZCByZWNhbGN1bGF0ZSBUcmVlR3JpZCB3aWR0aC4NCiAgICAgICAgICoNCiAgICAgICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICAgICAqIEBwcml2YXRlDQogICAgICAgICAqLw0KICAgICAgICBfdXBkYXRlVGFibGVXaWR0aCgpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLiRlbCAmJiB0aGlzLmNvbHVtbkl0ZXJhdG9yLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5zV2lkdGgubGVuZ3RoID09PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc1dpZHRoID0gdGhpcy5jb2x1bW5JdGVyYXRvci5tYXAoY29sID0+IGNvbC53aWR0aCA/IE51bWJlcihjb2wud2lkdGgpIDogMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IG51bUNvbHMgPSB0aGlzLmNvbHVtbkl0ZXJhdG9yLmxlbmd0aDsNCiAgICAgICAgICAgICAgICBjb25zdCBlbFdpZHRoID0gdGhpcy5pc0ZpeGVkSGVpZ2h0DQogICAgICAgICAgICAgICAgICAgID8gKHRoaXMuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gMTgpDQogICAgICAgICAgICAgICAgICAgIDogdGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7DQoNCiAgICAgICAgICAgICAgICBsZXQgYXZnQ29sV2lkdGggPSAwOw0KICAgICAgICAgICAgICAgIGxldCB0bXBDb2xzID0gdGhpcy5jb2x1bW5zV2lkdGgubWFwKGNvbCA9PiBjb2wpOw0KICAgICAgICAgICAgICAgIGxldCBkZWNXaWR0aCA9IHRydWU7DQogICAgICAgICAgICAgICAgbGV0IHRvdFdpZHRoID0gc3VtKHRtcENvbHMpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGNvbHNOb1dpZHRoID0gdG1wQ29scy5maWx0ZXIoYyA9PiBjID09PSAwKTsNCg0KICAgICAgICAgICAgICAgIGlmIChlbFdpZHRoID4gdG90V2lkdGggJiYgY29sc05vV2lkdGgubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICBhdmdDb2xXaWR0aCA9IE1hdGguZmxvb3IoKGVsV2lkdGggLSB0b3RXaWR0aCkgLyBjb2xzTm9XaWR0aC5sZW5ndGgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHRoaXMudGFibGUuY29sdW1ucyA9IHRoaXMuY29sdW1uSXRlcmF0b3IubWFwKChjb2wsIGlkeCkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAodG1wQ29sc1tpZHhdID09PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5XaWR0aCA9IHBhcnNlSW50KGNvbC5taW5XaWR0aCwgMTApOw0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXZnQ29sV2lkdGggPCBtaW5XaWR0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC53aWR0aCA9IGRlY1dpZHRoID8gKG1pbldpZHRoIC0gMSkgOiBtaW5XaWR0aDsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxXaWR0aCA8ICh0b3RXaWR0aCArIGF2Z0NvbFdpZHRoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IG51bUNvbHMgLSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC53aWR0aCA9IE1hdGgubWF4KChlbFdpZHRoIC0gdG90V2lkdGgpLCBtaW5XaWR0aCkgLSAoZGVjV2lkdGggPyAxIDogMCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLndpZHRoID0gZGVjV2lkdGggPyAobWluV2lkdGggLSAxKSA6IG1pbldpZHRoOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLndpZHRoID0gZGVjV2lkdGggPyAoYXZnQ29sV2lkdGggLSAxKSA6IGF2Z0NvbFdpZHRoOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgdG90V2lkdGggKz0gY29sLndpZHRoOw0KICAgICAgICAgICAgICAgICAgICAgICAgZGVjV2lkdGggPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2w7DQogICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnRhYmxlV2lkdGggPSB0b3RXaWR0aCA8PSBlbFdpZHRoID8gZWxXaWR0aCA6IHRvdFdpZHRoOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnRhYmxlV2lkdGggPSBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogUmVsb2FkIGRhdGEgZnJvbSB0aGUgcmVtb3RlIHNlcnZlci4NCiAgICAgICAgICoNCiAgICAgICAgICogQHJldHVybnMge3ZvaWR9DQogICAgICAgICAqLw0KICAgICAgICByZWxvYWQoKSB7DQogICAgICAgICAgICB0aGlzLl9mZXRjaERhdGEoKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="},{"version":3,"sources":["BsTreegrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BsTreegrid.vue","sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsGrid","sourcesContent":["<template>\r\n  <div\r\n    :class=\"_classNames\"\r\n    :style=\"_gridStyles\"\r\n    class=\"md-treegrid\">\r\n    <slot name=\"toolbar\"></slot>\r\n    <div class=\"md-grid-header\">\r\n      <div ref=\"theader\" class=\"md-grid-header-wrap\">\r\n        <table role=\"grid\" :style=\"_tableStyles\">\r\n          <colgroup>\r\n            <col\r\n              v-for=\"(column, idx) in columnIterator\"\r\n              :key=\"'col-' + _uuid() + idx\"\r\n              :style=\"_colHeaderStyles(column)\" />\r\n          </colgroup>\r\n          <thead role=\"rowgroup\">\r\n            <slot v-bind=\"{ items: dataItems }\" name=\"columnheader\"></slot>\r\n            <tr v-if=\"!$scopedSlots['columnheader']\" role=\"row\">\r\n              <slot></slot>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <bs-progress v-if=\"isLoading && loading.type === 'bar'\" v-bind=\"_progressLoadingAttrs\" />\r\n    <div\r\n      ref=\"tcontent\"\r\n      class=\"md-grid-content\"\r\n      @scroll=\"_handleScroll\">\r\n      <table role=\"treegrid\" :style=\"_tableStyles\">\r\n        <colgroup>\r\n          <col\r\n            v-for=\"(column, idx) in columnIterator\"\r\n            :key=\"'col-' + _uuid() + idx\"\r\n            :style=\"_colDataStyles(column)\" />\r\n        </colgroup>\r\n        <bs-treegrid-items\r\n          ref=\"treeitems\"\r\n          v-slot=\"{ index, item, level, node }\"\r\n          :columns=\"columnIterator\"\r\n          :items=\"dataItems\">\r\n          <slot\r\n            v-bind=\"{ columns: columnIterator, index: index, item: item, level: level, node: node }\"\r\n            name=\"datarow\"></slot>\r\n        </bs-treegrid-items>\r\n      </table>\r\n      <transition v-if=\"_showEmptyMessage\" name=\"fade\">\r\n        <div class=\"md-grid-alert my-3 mx-3 mx-md-auto\">\r\n          <bs-alert color=\"warning\" icon=\"exclamation-triangle\">\r\n            <slot name=\"emptyMessage\">\r\n              Sorry! No data to display here.\r\n            </slot>\r\n          </bs-alert>\r\n        </div>\r\n      </transition>\r\n    </div>\r\n    <div v-if=\"isLoading && loading.type === 'spinner'\" class=\"md-grid-progress-spinner\">\r\n      <bs-progress v-bind=\"_progressLoadingAttrs\" class=\"align-self-center\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BsAlert from \"../BsBasic/BsAlert\";\r\nimport BsProgress from \"../BsAnimation/BsProgress\";\r\nimport BsTreegridItems from \"./BsTreegridItems\";\r\nimport BsTreeStore from \"../../model/BsTreeStore\";\r\nimport BsArrayStore from \"../../model/BsArrayStore\";\r\nimport Helper from \"../../utils/Helper\";\r\nimport Common from \"../../mixins/Common\";\r\nimport Grid from \"./mixins/Grid\";\r\nimport sum from 'lodash/sum';\r\nimport { addResizeListener, removeResizeListener } from \"../../utils/ResizeListener\";\r\n\r\nexport default {\r\n    name: \"BsTreegrid\",\r\n    components: {BsTreegridItems, BsProgress, BsAlert},\r\n    mixins: [Common, Grid],\r\n    props: {\r\n        childrenFieldmap: {\r\n            type: String,\r\n            default: 'children'\r\n        },\r\n        /**\r\n         * @type {BsTreeStore|BsArrayStore|*}\r\n         */\r\n        dataSource: {\r\n            type: [BsTreeStore, BsArrayStore],\r\n            default: undefined\r\n        },\r\n        expandDepth: {\r\n            type: [Number, String],\r\n            default: 0,\r\n            validator: v => !isNaN(parseInt(v, 10))\r\n        },\r\n        expanded: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n    },\r\n    data: (vm) => ({\r\n        columnsWidth: [],\r\n        dataFetched: false,\r\n        isFetching: false,\r\n        table: {\r\n            columns: [],\r\n            childrenFieldmap: vm.childrenFieldmap,\r\n            /**\r\n             * @type {BsTreeStore|BsArrayStore}\r\n             */\r\n            dataSource: vm.dataSource,\r\n            expandDepth: vm.expandDepth,\r\n            expanded: vm.expanded,\r\n            tableWidth: undefined,\r\n            // methods\r\n            /**\r\n             * Filter the data based on the given filters and fire event <tt>'filter'</tt> after data has been filtered.\r\n             *\r\n             * @param {IFilter[]} filters - Collection of filters to be used\r\n             * @param {string} logic      - The filter logic to be used (optional)\r\n             */\r\n            fireEvent: vm.fireEvent\r\n        }\r\n    }),\r\n    provide() {\r\n        const _grid = this.table;\r\n\r\n        return {\r\n            TreeGrid: _grid\r\n        }\r\n    },\r\n    created() {\r\n        this._fetchData();\r\n    },\r\n    mounted() {\r\n        addResizeListener(this.$el, this._updateTableWidth);\r\n        this._updateBodyHeight();\r\n    },\r\n    beforeDestroy() {\r\n        removeResizeListener(this.$el, this._updateTableWidth);\r\n        this.columnsWidth = null;\r\n        this.table.columns = null;\r\n        this.table = null;\r\n    },\r\n    methods: {\r\n        /**\r\n         * Fetch data from array data source or remote server.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _fetchData() {\r\n            this.isFetching = true;\r\n\r\n            if (!Helper.isEmpty(this.dataSource)) {\r\n                if (this.$refs.treeitems) {\r\n                    this.$refs.treeitems.treeNodes = [];\r\n                }\r\n                this.dataSource\r\n                    .load()\r\n                    .then(() => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('data-bind', this.dataSource.dataItems);\r\n                        if (this.$refs.treeitems) {\r\n                            this.$refs.treeitems.populateNodes(0, this.dataSource.dataItems);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.dataFetched = true;\r\n                        this.isFetching = false;\r\n                        this.fireEvent('error', error);\r\n                    });\r\n            } else {\r\n                this.dataFetched = false;\r\n                this.isFetching = false;\r\n            }\r\n        },\r\n        /**\r\n         * Event handler when table body is scrolling.\r\n         *\r\n         * @param {Event} e The received event\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _handleScroll(e) {\r\n            const scrollLeft = e.target.scrollLeft;\r\n            const theader = this.$refs.theader;\r\n            const tfooter = this.$refs.tfooter;\r\n\r\n            if (theader) {\r\n                theader.scrollLeft = scrollLeft;\r\n            }\r\n            if (tfooter) {\r\n                tfooter.scrollLeft = scrollLeft;\r\n            }\r\n        },\r\n        /**\r\n         * Update TreeGrid body height.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateBodyHeight() {\r\n            if (this.isFixedHeight && (!this.isSmallScreen || !this.flipOnSmallScreen)) {\r\n                const gridHeight = this.$el.offsetHeight;\r\n                const theaderHeight = this.$refs.theader ? this.$refs.theader.offsetHeight : 0;\r\n                const tfooterHeight = this.$refs.tfooter ? this.$refs.tfooter.offsetHeight : 0;\r\n                const footerHeight = this.$refs.footer ? this.$refs.footer.offsetHeight : 0;\r\n\r\n                this.$refs.tcontent.style.height = (gridHeight - (theaderHeight + tfooterHeight + footerHeight)) + 'px';\r\n            }\r\n        },\r\n        /**\r\n         * Detect screen size and recalculate TreeGrid width.\r\n         *\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _updateTableWidth() {\r\n            if (this.$el && this.columnIterator.length > 0) {\r\n                if (this.columnsWidth.length === 0) {\r\n                    this.columnsWidth = this.columnIterator.map(col => col.width ? Number(col.width) : 0);\r\n                }\r\n                const numCols = this.columnIterator.length;\r\n                const elWidth = this.isFixedHeight\r\n                    ? (this.$el.getBoundingClientRect().width - 18)\r\n                    : this.$el.getBoundingClientRect().width;\r\n\r\n                let avgColWidth = 0;\r\n                let tmpCols = this.columnsWidth.map(col => col);\r\n                let decWidth = true;\r\n                let totWidth = sum(tmpCols);\r\n                const colsNoWidth = tmpCols.filter(c => c === 0);\r\n\r\n                if (elWidth > totWidth && colsNoWidth.length > 0) {\r\n                    avgColWidth = Math.floor((elWidth - totWidth) / colsNoWidth.length);\r\n                }\r\n\r\n                this.table.columns = this.columnIterator.map((col, idx) => {\r\n                    if (tmpCols[idx] === 0) {\r\n                        const minWidth = parseInt(col.minWidth, 10);\r\n\r\n                        if (avgColWidth < minWidth) {\r\n                            col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                        } else if (elWidth < (totWidth + avgColWidth)) {\r\n                            if (idx === numCols - 1) {\r\n                                col.width = Math.max((elWidth - totWidth), minWidth) - (decWidth ? 1 : 0);\r\n                            } else {\r\n                                col.width = decWidth ? (minWidth - 1) : minWidth;\r\n                            }\r\n                        } else {\r\n                            col.width = decWidth ? (avgColWidth - 1) : avgColWidth;\r\n                        }\r\n                        totWidth += col.width;\r\n                        decWidth = false;\r\n                    }\r\n\r\n                    return col;\r\n                });\r\n\r\n                this.table.tableWidth = totWidth <= elWidth ? elWidth : totWidth;\r\n            } else {\r\n                this.table.tableWidth = null;\r\n            }\r\n        },\r\n        /**\r\n         * Reload data from the remote server.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        reload() {\r\n            this._fetchData();\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"~compass-sass-mixins/lib/compass/css3\";\r\n@import \"../../../scss/colors\";\r\n@import \"../../../scss/variables\";\r\n\r\n.#{$prefix}-treegrid {\r\n    .#{$prefix}-grid-content {\r\n        tr {\r\n            @include transition($transition-basic);\r\n\r\n            > .#{$prefix}-treegrid-cell {\r\n                &:first-child {\r\n                    padding-left: $table-cell-padding;\r\n                }\r\n\r\n                .#{$prefix}-grid-cell-inner {\r\n                    padding-left: .2rem;\r\n                }\r\n\r\n                .icon-chevron-right {\r\n                    @include transition($transition-basic);\r\n\r\n                    &.expanded {\r\n                        @include transform(rotateZ(90deg));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"]}]}